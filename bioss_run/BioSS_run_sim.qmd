---
title: "bioss_run_sim"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
---

## 

```{r}
#| include: false
# initially required packages
library(tidyverse)
library(roamR)
library(stars)
library(sf)
library(distributional)
library(CircStats)
library(devtools)

# access the package elements
load_all()



# UTM zone 30N
utm30 <- st_crs(32630)

#setwd("bioss_run/")

source("tools/sample_cell.R")
source("tools/calc_day_costs.R")
source("tools/run_sim.R")


# Input data layers -----------------------------------------------------------------------------------------------

density_map <- readRDS("data/GuillemotIsle of May3_iteration1.rds") %>%
  st_as_stars() %>%
  rename(pop_dens = X3)

dens_crop <- st_bbox(c(xmin = -5e5, ymin = -4e6,  xmax = 5e5, ymax = -3.2e6), crs = st_crs(density_map))

density_map <- st_crop(density_map, dens_crop)

template_rast <- st_as_stars(dens_crop |> st_transform(utm30) |>  st_bbox(), nx = dim(density_map)[1], ny = dim(density_map)[2], values = NA_real_)

density_map <- st_warp(density_map, template_rast)


sst <- stars::read_ncdf("data/sst.mnmean.nc") %>%
  filter(time >= "2023-12-01")


# crop to AOC: dec lat/long
sst_aoc <- dens_crop %>%
  st_transform(4326)

source("tools/sst-to-aoc.R")

# due to such low res, we need to interpolate - a fancy model would be best, here just mean
sst_crop <- st_crop(sst, sst_aoc)
sst_crop$sst <- ifelse(is.na(sst_crop$sst), mean(sst_crop$sst, na.rm = T), sst_crop$sst)

sst_crop <- sst_crop %>%
  st_transform(st_crs(density_map))



# IBM settings -------------------------------------------------

isle_may <- st_sf(
  id = "Isle of May",
  prop = 1,
  geom = st_sfc(st_point(c(-2.5667, 56.1833))),
  crs = 4326
)



# Set up IBM drivers ----------------------------------------------------------------------------------------------

sst_drv <- Driver(
  id = "sst",
  type = "habitat",
  descr = "Sea Surface Temperature",
  stars_obj = sst_crop %>% st_transform(utm30)
)


dens_drv <- Driver(
  id = "dens",
  type = "impact",
  descr = "dens/energy map",
  stars_obj = density_map
)

# store as list for initialisation
guill_drivers <- list(
  sst = sst_drv,
  dens = dens_drv
)


# Response to drivers  -------------------------------------------------

driver_resp <- list()
```


```{r}
# States specification -------------------------------------------------

states <- list(
  flight = State(
    id = "flight",
    energy_cost = VarDist(dist_normal(507.6, 237.6), units = "kJ/hour"), # vals from excel sheet. Normal may not be adequate (some good chance of <zero)
    time_budget = VarDist(dist_degenerate(0.056), "hours/day"), # roughly based on Lila's summaries
    speed = VarDist(dist_uniform(10, 20), "m/s") # made-up
  ),
  dive = State(
    id = "diving",
    energy_cost = VarDist(dist_normal(3.71, 1.3), units = NULL), # from spreadsheet
    time_budget = VarDist(dist_degenerate(3.11), "hours/day"), # roughly based on Lila's summaries
    speed = VarDist(dist_uniform(0, 1), "m/s") # made-up
  ),
  active = State(
    id = "active_on_water",
    energy_cost = VarDist(dist_normal(113, 22), units = NULL), # made-up
    time_budget = VarDist(dist_degenerate(10.5), "hours/day"), # roughly based on Lila's summaries
    speed = VarDist(dist_uniform(0, 1), "m/s") # made-up
  ),
  inactive = State(
    id = "inactive_on_water",
    energy_cost = VarDist(dist_normal(72.2, 22), units = NULL), # made-up
    time_budget = VarDist(dist_degenerate(10.3), "hours/day"), # roughly based on Lila's summaries
    speed = VarDist(dist_uniform(0, 1), "m/s") # made-up
  ),
  colony = State(
    id = "colony",
    energy_cost = VarDist(dist_normal(33.8, 11.4), units = "kJ/hour"), # vals from excel sheet
    time_budget = VarDist(dist_degenerate(0), "hours/day"), # no time at colony
    speed = VarDist(0, "m/s") # made-up
  )
)

# Specify <Species>  -------------------------------------------------

guill <- Species(
  id = "guill",
  common_name = "guillemot",
  scientific_name = "Uria Aalge",
  pop_size = 15000,
  body_mass_distr = VarDist(dist_uniform(600, 1450), "g"),
  mortality_thresh_distr = VarDist(800, "g"),
  states_profile = states,
  driver_responses = driver_resp
)


# IBM Settings - modify parameter values to your specific case
guill_imb_config <- ModelConfig(
  n_agents = 1,
  ref_sys = utm30,
  aoc_bbx = dens_crop |> st_transform(utm30) |>  st_bbox(), #
  delta_x = 1000,
  delta_y = 1000,
  time_step = "1 day",
  start_date = date("2025-07-01"),
  end_date = date("2025-07-01") + 240, # ~9 months
  start_sites = isle_may |> st_transform(utm30),
  end_sites = isle_may |> st_transform(utm30)
)
```


```{r}
# Initiate Agent  -------------------------------------------------

guill_ibm <- rmr_initiate(
  species = guill,
  drivers = guill_drivers,
  model_config = guill_imb_config
)
```


```{r}
agent_list <- list()
  n_agents <- 4

  set.seed(4958)

  for(i in 1:n_agents){

  agent_list[[i]] <- Agent(species = guill, model_config = guill_imb_config)

  agent_list[[i]]@history <- agent_list[[i]]@history %>%
    st_set_crs(guill_imb_config@ref_sys)

  } # eol i
```


```{r}

sequent_runs <- lapply(agent_list[1], \(x) run_sim(in_agent = x, in_ibm = guill_ibm, in_species = guill, in_ibm_config = guill_imb_config,
            in_density = guill_ibm@drivers$dens@stars_obj))

```
