[{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Case Study: guillemot Isle of May","text":"use {roamR} simulate movement energetics population common guillemot (Uria aalge) Isle May. broad-scale details {roamR} package, refer general guide, general architecture repeated :  simulations cover non-breeding season (9 months, July March) two broad scenarios: environment free Offshore Windfarms (OWFs) - nominally status quo environment many synthetic OWF developments overall intention quantify effects potential displacement developments, based counterfactual comparisons animal’s condition scenarios. keeping architecture {roamR} package, following main components populated: IBM general settings (<ModelConfig>) sundry high-level controls simulation, number agents, broad spatial boundaries, spatial projections, time-steps, start & finish dates. Species-level information (<Species>) distributions governing initial body mass, behavioural states possible, movement parameters, agents respond environment e.g. avoidance windfarms landmass, costs associated activity. Drivers (<Driver>) descriptions/data define environment agents may interact respond e.g. sea surface temperatures, locations windfarms, coastlines, prey fields etc. extent can reliably populated obviously vary, guillemot chosen population relatively well studied. {roamR} intentionally general substantial functionality used simulation. populate various elements simulation turn, turning running simulation post-processing results.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"Case Study: guillemot Isle of May","text":"relatively well-studied species/population, many {roamR} elements populate. Mainly : Density maps SST Activity data Energetics Bodyweight body mass conversion ) described detail b) specified {roamR} forms following sections. {roamR} can run little data (example data sparse species given alternative test case red-throated divers), results correspondingly less informative stochastic.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"ibm-configuration","dir":"Articles","previous_headings":"Input data","what":"IBM configuration","title":"Case Study: guillemot Isle of May","text":"broad configuration IBM specified via function ModelConfig().interest speed, example simulation large terms number agents run - ’ll opt agents (n_agents), whereas typical run 1000s. non-breeding season animals runs approximately start July 9 months (start_date, end_date). ’ll opt uniform 1km^2 spatial resolution (x_delta, y_delta) everything operate UTM 30N coordinate system (ref_sys). basis ingesting aligning general spatial inputs. Note: package currently requires spatial inputs (e.g. density maps) provided common Coordinate Reference System (CRS) 1. sf package generally used dealing spatial data (interlinked stars package spatiotemporal). Agent start end locations (start_sites, end_sites) must supplied assf objects containing two required columns: id (unique site identifier) prop (proportion agents assigned site). example, use Isle May sole starting location, specified geographic coordinates (longitude/latitude). Note end_sites utilised simulation, meaning movement model assumes agents remain final locations simulation ends. noted earlier, site must re-projected common UTM Zone 30N coordinate reference system. terms bounding entire simulation spatially, ’ve opted semi-arbitrary bounding box around Isle May encompasses large swathe North Sea far west UK, covers bulk guillemot density maps. Note hard boundary terms simulations - data outside influence. Passing configuration inputs ModelConfig() creates <ModelConfig> object, assigned guill_ibm_config:","code":"# Set UTM zone 30N utm30 <- st_crs(32630) # location of colony in long/lat degrees - start/finish locations isle_may <- st_sf(   id = \"Isle of May\",   prop = 1,   geom = st_sfc(st_point(c(-2.5667, 56.1833))),   crs = 4326)   # re-project to UTM 30N isle_may <- st_transform(isle_may, crs = utm30) AoC <- st_bbox(c(xmin = 178831, ymin = 5906535,  xmax = 1174762, ymax = 6783609), crs = st_crs(utm30)) # IBM Settings - assume fixed for these simulations  guill_ibm_config <- ModelConfig(   n_agents = 4,   ref_sys = utm30,   aoc_bbx = AoC,    delta_x = 1000,   delta_y = 1000,   delta_time = \"1 day\",   start_date = date(\"2025-07-01\"),   end_date = date(\"2025-07-01\") + 270,    start_sites = isle_may )  class(guill_ibm_config) #> [1] \"ModelConfig\" #> attr(,\"package\") #> [1] \"roamR\""},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"driver-information---specifying-the-environment","dir":"Articles","previous_headings":"Input data","what":"Driver information - specifying the environment","title":"Case Study: guillemot Isle of May","text":"Drivers define environment agents may interact respond, driver specified via Driver() function. scope defined level knowledge species hand - minimum agents responsive environment. environmental component can/functionally linked animal’s behaviour (activity states movement) energetics, must included definition environment via drivers. application common guillemot, following drivers required - provided spatio-temporal datacubes (2D rasters giving values x,yx, y locations tt times) agents can query environment x,y,tx, y, t: Monthly species density surfaces, baseline impacted scenarios (Buckingham et al. (2023)). give monthly density predictions around UK 10 sq-km resolution (bootstrap uncertainties). Monthly energy intake maps (kJ/h), baseline impacted scenarios based density maps , conspecifics (Guillemots, refer ). Monthly average Sea Surface Temperature (SST) maps (National Oceanic Atmospheric Administration/NOAA ). {roamR} enforces strict requirement input variables accompanied appropriate measurement units. ensures computations performed simulation unit-aware, allowing accurate operations conversions. begin uploading datacubes, assigning measurement units missing. Next specify corresponding drivers, stored list <Driver> objects. Collectively define environment agents move . flexible, can comprise coastal polygons, OWF footprints, prey-fields etc. ’re providing sea surface temperature animal density surfaces, maps reflect energy Note ’re adopting density-informed movement model (refer guidance document) uses density maps location preference. feasible locations defined density surfaces (coast implicit), OWF similarly implicit “impact” density surfaces, OWF-sensitive agents avoid developments. energetics maps reflect Ideal Free Distribution (IFD) unimpacted case .e. agent’s energy requirements met average - distribution reflects underlying resource. impacted energy maps reflect displacement OWF footprints, including conspecifics, meaning proportional reduction IFD due competition guillemot e.g. twice many individuals means 1/2 resource.","code":"# driver spatial surfaces  spec_map <- readRDS(\"data/bioss_spec_map.rds\") |>     mutate(density =  units::set_units(density, \"counts\"))  spec_imp_map <- readRDS(\"data/bioss_spec_imp_map.rds\") |>     mutate(density =  units::set_units(density, \"counts\"))  intake_map <- readRDS(\"data/guill_energy_intake_map.rds\")  imp_intake_map <- readRDS(\"data/guill_impacted_energy_intake_map.rds\")  sst_map <- readRDS(\"data/bioss_sst_stars.rds\") |>    mutate(sst =  units::set_units(sst, \"degree_Celsius\")) |>    stars::st_warp(crs = sf::st_crs(spec_map), threshold  = 20028) # Set up IBM drivers   dens_drv <- Driver(   id = \"dens\",   type = \"resource\",   descr = \"species dens map\",   stars_obj = spec_map,   obj_active = \"stars\" )  dens_imp_drv <- Driver(   id = \"dens_imp\",   type = \"resource\",   descr = \"species redist map\",   stars_obj = spec_imp_map,   obj_active = \"stars\" )  energy_drv <- Driver(   id = \"energy\",   type = \"resource\",   descr = \"energy map\",   stars_obj = intake_map,   obj_active = \"stars\" )  imp_energy_drv <- Driver(   id = \"imp_energy\",   type = \"resource\",   descr = \"energy impact map\",   stars_obj = imp_intake_map,   obj_active = \"stars\" )   sst_drv <- Driver(   id = \"sst\",   type = \"habitat\",   descr = \"Sea Surface Temperature\",   stars_obj = sst_map,   obj_active = \"stars\" )   # store as list for initialisation guill_drivers <- list(   dens = dens_drv,   imp_dens = dens_imp_drv,   energy = energy_drv,   imp_energy = imp_energy_drv,   sst = sst_drv )"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"species-information---properties-that-inform-individual-agents","dir":"Articles","previous_headings":"Input data","what":"Species information - properties that inform individual agents","title":"Case Study: guillemot Isle of May","text":"Species-level information defined using Species() function, depends set input objects. clarity modularity, inputs prepared specified beforehand.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"states-profile","dir":"Articles","previous_headings":"Input data > Species information - properties that inform individual agents","what":"States Profile","title":"Case Study: guillemot Isle of May","text":"begin defining behavioural states include model. state represents specific activity, characterized parameters energy expenditure, time allocation, movement speed. States created using State() function. {roamR} supports flexible specification state properties, allowing incorporation stochastic variation population individual (agent) level. include 4 states: flying diving active water (.e. swimming) inactive water (.e. resting) start ‘flight’ state. current simulation, assume energetic cost flying agent varies throughout simulation, following Normal distribution mean 507.6 kJ/h standard deviation of237.6 kJ/h. source figures Elliott et al. (2013). Stochasticity can enter various ways, specify average speed agent fixed simulation (e.g. ’re implying relatively fast/slow animals), agents speeds drawn uniform distribution, specified . state representing ‘diving’ activity (Elliott et al. 2013) energy output contingent amount diving. performing day-level calculations, meaning far simulating dive level, can use mean dive-length without loss generality. t_dive populated later tag information. e=3.71∑(1−e−Ti/1.23)∑iTi e = 3.71\\frac{\\sum_i(1-e^{-T_i/1.23})}{\\sum_iT_i} TiT_i dive length dive ii minutes. State representing ‘active water’ (Buckingham et al. 2023) linear function SST: e=−(b*SST) e = -(b*SST) aa mean 113 SD 22. bb constant 2.75. State ‘inactive water’ (Buckingham et al. 2023), follows linear function SST, aa mean 72.2 SD 22. bb similarly constant 2.75. combined give list covering states: guill_states:","code":"# user-defined function returning the energy cost of flying flight_cost_fn <- function(mean, sd){   e <- rnorm(1, mean, sd)   (max(e, 1)) |>     units::set_units(\"kJ/h\") }  flight <- State(   id = \"flight\",    energy_cost = VarFn(     flight_cost_fn,      args_spec = list(mean = 507.6, sd = 237.6),      units = \"kJ/hour\"     ),    time_budget = VarDist(0.056, \"hours/day\"),    speed = VarDist(dist_uniform(10, 20), \"m/s\") ) # define costing function dive_cost_fn <- function(t_dive, alpha_mean, alpha_sd){   alpha <- rnorm(1, alpha_mean, alpha_sd)   (max(alpha*sum(1-exp(-t_dive/1.23))/sum(t_dive)*60, 1)) |>     units::set_units(\"kJ/h\") }   # Construct <State> object dive <- State(   id = \"diving\",    energy_cost = VarFn(     dive_cost_fn,      args_spec = list(t_dive = 1.05, alpha_mean = 3.71, alpha_sd = 1.3),      units = \"kJ/hour\"     ),    time_budget = VarDist(3.11, \"hours/day\"),    speed = VarDist(dist_uniform(0, 1), \"m/s\") ) active_water_cost_fn <- function(sst, int_mean, int_sd){   int <- rnorm(1, int_mean, int_sd)   (max(int-(2.75*sst), 1)) |>     units::set_units(\"kJ/h\") }   # Construct <State> object active <- State(   id = \"active_on_water\",    energy_cost = VarFn(     active_water_cost_fn,      args_spec = list(sst = \"driver\", int_mean = 113, int_sd = 22),      units = \"kJ/hour\"   ),    time_budget = VarDist(10.5, \"hours/day\"),    speed = VarDist(dist_uniform(0, 1), \"m/s\") ) inactive_water_cost_fn <- function(sst, int_mean, int_sd){   int <- rnorm(1, int_mean, int_sd)   (max(int-(2.75*sst), 1)) |>     units::set_units(\"kJ/h\") }   inactive <- State(   id = \"inactive_on_water\",    energy_cost = VarFn(     active_water_cost_fn,      args_spec = list(sst = \"driver\", int_mean = 72.2, int_sd = 22),      units = \"kJ/hour\"   ),    time_budget = VarDist(10.3, \"hours/day\"),    speed = VarDist(dist_uniform(0, 1), \"m/s\") ) guill_states <- list(   flight = flight,   dive = dive,   active = active,   inactive = inactive )"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"driver-responses","dir":"Articles","previous_headings":"Input data > Species information - properties that inform individual agents","what":"Driver Responses","title":"Case Study: guillemot Isle of May","text":"section, define species-level, agent-specific responses environmental drivers introduced defined earlier. guillemot model, assign density drivers - identified \"dens\" (baseline) \"dens_imp\" (impacted) - primary determinants agent movement (density maps per Buckingham et al. (2022)). scenario, also specify probability agent influenced respective driver. baseline case, agents “respond” density map movement. driver \"dens_imp\", probability reflects likely agent respond OWF installation (Peschko et al. 2024) - hence influence map differs.","code":"resp_dens <- DriverResponse(   driver_id = \"dens\",   movement = MoveInfluence(     prob = VarDist(distributional::dist_degenerate(1)),     type = \"attraction\",     mode = \"cell-value\",     sim_stage = \"bsln\"   ) )  resp_imp_dens <- DriverResponse(   driver_id = \"dens_imp\",   movement = MoveInfluence(     prob = VarDist(distributional::dist_normal(0.67, sd = 0.061)),     type = \"attraction\",     mode = \"cell-value\",     sim_stage = \"imp\"   ) )"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"create-the-species-object","dir":"Articles","previous_headings":"Input data > Species information - properties that inform individual agents","what":"Create the <Species> object","title":"Case Study: guillemot Isle of May","text":"addition parameters defined , set remaining species-level properties, including body mass distribution (used initialise agent’s body mass) energy--mass conversion rate (Dunn et al. 2022), assumed constant across agents simulated time steps. distribution body mass start breeding season drawn/inferred Harris Wanless (1988) (additional advice F. Daunt, pers. comm., 2025) .","code":"guill <- Species(   id = \"guill\",   common_name = \"guillemot\",   scientific_name = \"Uria Aalge\",   body_mass_distr = VarDist(dist_normal(mean = 929, sd = 56), \"g\"),   energy_to_mass_distr = VarDist(0.072, \"g/kJ\"),   states_profile = guill_states,   driver_responses = list(resp_dens, resp_imp_dens) )"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"setting-up-and-running-the-ibm","dir":"Articles","previous_headings":"","what":"Setting up and running the IBM","title":"Case Study: guillemot Isle of May","text":"Now key components IBM specified, {roamR} can used initialisation running simulations.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"initialisation","dir":"Articles","previous_headings":"Setting up and running the IBM","what":"Initialisation","title":"Case Study: guillemot Isle of May","text":"intialisation stage performs two main tasks prior running: checking inputs conformity, adjustments (e.g. clipping AoC) derivation vector fields needed. generation n_agents indicated model config object.","code":"set.seed(1009)  guill_ibm <- xfun::cache_rds({   rmr_initiate(   model_config = guill_ibm_config,   species = guill,   drivers = guill_drivers )  })"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"running-the-simulation","dir":"Articles","previous_headings":"Setting up and running the IBM","what":"Running the simulation","title":"Case Study: guillemot Isle of May","text":"running simulation involves moving initialised agents defined environment, monitoring condition time determining responses . Parallelisation dealt (assumed generally used) individual agents piped independent threads calculation - hence speed simulation function number cores available2. Much parameterisiation data previous sections encapsulated within ibm object (guill_ibm) passed simulation. Several additional parameters per documentation can entered needed. specify: state(s) feeding states resting states - state-balancing calculations (refer main documentation) increase/decrease required feed_avg_net_energy average net energy per unit feeding - tuning parameter, calculable directly energy required balance energetics equations average agent. target_energy objective state rebalancing terms daily energy (refer main documentation). controls extent agents change feeding behaviour response feeding success - low success means feeding following day. expressed target daily net energy, modest positive value, based empirical results body mass start end non-breeding season (pers. comm. F. Daunt 2025). smooth_body_mass use-defined function convert energy time-series mass. mass deposition occurs function preceding 7 days energy intake (pers. comm. J. Green, 2025).","code":"plan(multisession, workers = 2)  guill_results <- xfun::cache_rds({   run_disnbs(   ibm = guill_ibm,   run_scen = \"baseline-and-impact\",    dens_id = \"dens\",    intake_id = \"energy\",    imp_dens_id = \"dens_imp\",    imp_intake_id = \"imp_energy\",    feed_state_id = \"diving\",    roost_state_id = \"inactive_on_water\",    feed_avg_net_energy = units::set_units(422, \"kJ/h\"),    target_energy = units::set_units(1, \"kJ\"),    smooth_body_mass = bm_smooth_opts(time_bw = \"7 days\"),    waypnts_res = 1000,    seed = 1990 )  })  plan(sequential)"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"digesting-the-results","dir":"Articles","previous_headings":"","what":"Digesting the results","title":"Case Study: guillemot Isle of May","text":"{roamR} records extensive amount information running monitoring agents. primary output list, one element agent. stored agents consist three main components (class, per package schema): properties - drawn/set intialisation simulation species definition, remain constant throughout condition - specific condition agent point simulation. final condition simulation completes. history - detailed record elements agent’s condition throughout simulation. Spatiotemporally stamped, includes post-processed energy--mass conversions. form basis downstream calculations based simulation outputs. impact scenarios play, one list, agents paired impact scenarios e.g. baseline versus impact. can examine agent’s simulation histories directly - two scenarios, containing number agents:","code":"# two scenarios   names(guill_results) #> [1] \"agents_bsln\" \"agents_imp\"  # several agents within each   length(guill_results$agents_bsln) #> [1] 4  # one agents history str(guill_results$agents_bsln[[1]]@history) #> Classes 'sf' and 'data.frame':   272 obs. of  15 variables: #>  $ timestep                          : int  0 1 2 3 4 5 6 7 8 9 ... #>  $ timestamp                         : POSIXct, format: NA \"2025-07-01\" ... #>  $ track_id                          : int  0 1 1 1 1 1 1 1 1 1 ... #>  $ body_mass                         : Units: [g] num  893 843 824 860 787 ... #>  $ body_mass_smooth                  : Units: [g] num  NA 841 841 842 842 ... #>  $ states_budget.flight              : num  0.00234 0.0025 0.00243 0.00257 0.00229 ... #>  $ states_budget.diving              : num  0.1298 0.0677 0.0941 0.0444 0.1454 ... #>  $ states_budget.active_on_water     : num  0.438 0.469 0.456 0.481 0.43 ... #>  $ states_budget.inactive_on_water   : num  0.43 0.46 0.447 0.472 0.422 ... #>  $ states_unit_cost.flight           : Units: [kJ/h] num  0 -326 -580 -268 -380 ... #>  $ states_unit_cost.diving           : Units: [kJ/h] num  0 -176.8 -210.4 -138.4 -87.9 ... #>  $ states_unit_cost.active_on_water  : Units: [kJ/h] num  0 -108.2 -100.6 -76.2 -118.9 ... #>  $ states_unit_cost.inactive_on_water: Units: [kJ/h] num  0 -64.9 -29.3 -47.7 -49.5 ... #>  $ energy_expenditure                : Units: [kJ] num  0 -684 -952 -449 -1472 ... #>  $ geometry                          :sfc_POINT of length 272; first list element:  'XY' num  526896 6226565 #>  - attr(*, \"sf_column\")= chr \"geometry\" #>  - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ... #>   ..- attr(*, \"names\")= chr [1:14] \"timestep\" \"timestamp\" \"track_id\" \"body_mass\" ..."},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"comparing-scenarios","dir":"Articles","previous_headings":"Digesting the results","what":"Comparing scenarios","title":"Case Study: guillemot Isle of May","text":"extract history agents two scenarios comparison. agents scenarios combined one dataset.","code":"#> Simple feature collection with 2176 features and 19 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 363772.8 ymin: 5958868 xmax: 1143527 ymax: 6746621 #> Projected CRS: WGS 84 / UTM zone 30N #> First 10 features: #>      scenario agent timestep  timestamp track_id    body_mass body_mass_smooth #> 1  status-quo     1        0       <NA>        0 892.7471 [g]           NA [g] #> 2  status-quo     1        1 2025-07-01        1 843.4863 [g]     841.0222 [g] #> 3  status-quo     1        2 2025-07-02        1 824.1961 [g]     841.3407 [g] #> 4  status-quo     1        3 2025-07-03        1 860.4239 [g]     841.6555 [g] #> 5  status-quo     1        4 2025-07-04        1 786.7908 [g]     841.9606 [g] #> 6  status-quo     1        5 2025-07-05        1 899.6028 [g]     842.2460 [g] #> 7  status-quo     1        6 2025-07-06        1 851.8596 [g]     842.5069 [g] #> 8  status-quo     1        7 2025-07-07        1 797.9183 [g]     842.7435 [g] #> 9  status-quo     1        8 2025-07-08        1 860.3766 [g]     842.9635 [g] #> 10 status-quo     1        9 2025-07-09        1 844.7294 [g]     843.1735 [g] #>    states_budget.flight states_budget.diving states_budget.active_on_water #> 1           0.002336644           0.12976717                     0.4381207 #> 2           0.002503428           0.06765173                     0.4693928 #> 3           0.002432399           0.09410517                     0.4560748 #> 4           0.002565795           0.04442471                     0.4810865 #> 5           0.002294667           0.14540035                     0.4302501 #> 6           0.002685079           0.00000000                     0.5034522 #> 7           0.002534260           0.05616915                     0.4751738 #> 8           0.002335640           0.13014076                     0.4379326 #> 9           0.002565621           0.04448955                     0.4810539 #> 10          0.002508006           0.06594702                     0.4702511 #>    states_budget.inactive_on_water states_unit_cost.flight #> 1                        0.4297755           0.0000 [kJ/h] #> 2                        0.4604520        -326.0301 [kJ/h] #> 3                        0.4473876        -580.4143 [kJ/h] #> 4                        0.4719230        -267.6850 [kJ/h] #> 5                        0.4220549        -380.0569 [kJ/h] #> 6                        0.4938627        -540.9809 [kJ/h] #> 7                        0.4661228        -458.9594 [kJ/h] #> 8                        0.4295910        -452.3054 [kJ/h] #> 9                        0.4718909        -173.1052 [kJ/h] #> 10                       0.4612939        -818.3772 [kJ/h] #>    states_unit_cost.diving states_unit_cost.active_on_water #> 1           0.00000 [kJ/h]                   0.00000 [kJ/h] #> 2        -176.78357 [kJ/h]                -108.17686 [kJ/h] #> 3        -210.44304 [kJ/h]                -100.59187 [kJ/h] #> 4        -138.40550 [kJ/h]                 -76.24058 [kJ/h] #> 5         -87.91532 [kJ/h]                -118.91570 [kJ/h] #> 6         -90.63622 [kJ/h]                -132.35904 [kJ/h] #> 7         -87.63698 [kJ/h]                 -34.04614 [kJ/h] #> 8         -66.87361 [kJ/h]                -123.85927 [kJ/h] #> 9        -178.81558 [kJ/h]                 -91.25478 [kJ/h] #> 10       -142.40802 [kJ/h]                 -84.17964 [kJ/h] #>    states_unit_cost.inactive_on_water energy_expenditure       Date month #> 1                     0.000000 [kJ/h]       0.00000 [kJ]       <NA>    NA #> 2                   -64.856872 [kJ/h]    -684.17668 [kJ] 2025-07-01     7 #> 3                   -29.316059 [kJ/h]    -952.09712 [kJ] 2025-07-02     7 #> 4                   -47.738181 [kJ/h]    -448.93350 [kJ] 2025-07-03     7 #> 5                   -49.479257 [kJ/h]   -1471.61472 [kJ] 2025-07-04     7 #> 6                    -8.571322 [kJ/h]      95.21804 [kJ] 2025-07-05     7 #> 7                   -10.708986 [kJ/h]    -567.88115 [kJ] 2025-07-06     7 #> 8                   -46.383505 [kJ/h]   -1317.06559 [kJ] 2025-07-07     7 #> 9                   -59.964954 [kJ/h]    -449.59019 [kJ] 2025-07-08     7 #> 10                   -6.390341 [kJ/h]    -666.91142 [kJ] 2025-07-09     7 #>    suscep                 geometry #> 1   FALSE POINT (526895.8 6226565) #> 2   FALSE POINT (543716.2 6248777) #> 3   FALSE POINT (543716.2 6248777) #> 4   FALSE POINT (543716.2 6248777) #> 5   FALSE POINT (543716.2 6248777) #> 6   FALSE POINT (543716.2 6248777) #> 7   FALSE POINT (543716.2 6248777) #> 8   FALSE POINT (543716.2 6248777) #> 9   FALSE POINT (543716.2 6248777) #> 10  FALSE POINT (543716.2 6248777)"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"body-mass-traces","dir":"Articles","previous_headings":"Digesting the results > Comparing scenarios","what":"body mass traces","title":"Case Study: guillemot Isle of May","text":"can examine small number agents graphically - body mass histories implied simulated energetics. Note {roamR} heart simulates energetics, conversion functions energy mass specified user. primary conversion figure Dunn et al. (2022), relating energy grams body mass.","code":"p_bdm <- guill_history |>    ggplot() +   geom_line(aes(x = Date, y = body_mass_smooth, col = scenario), linewidth = 1) +   scale_color_brewer(palette = \"Set1\") +   theme(legend.position = \"bottom\") +   facet_wrap(~agent, ncol = 2, scales = \"free\")    p_bdm ggsave(\"images/body mass.png\", p_bdm, width = 12, height = 12)"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"agent-tracks","dir":"Articles","previous_headings":"Digesting the results > Comparing scenarios","what":"Agent tracks","title":"Case Study: guillemot Isle of May","text":"Similarly movement tracks select agents time can visualised, two impact scenarios. separate property agent - assigned susceptibility OWF agent initialisation - recalling stochastic specification species level.","code":"p_tracks <- guill_history |>    drop_na(timestamp) |>    filter(suscep == FALSE) |>    filter(agent == last(agent)) |>    ggplot() +   stars::geom_stars(data = spec_imp_map) +   geom_sf(aes(col = scenario)) +   scale_color_brewer(palette = \"Set1\") +   scale_fill_distiller(palette = \"Greys\", direction = 1) +   facet_wrap(~month, ncol = 3) +   labs(title = \"Monthly movement tracks for a non-sensitive agent\", subtitle = \"Status-quo Vs Impacted scenarios\")    p_tracks ggsave(\"images/tracks_non_susceptile_agent.png\", p_tracks, width = 15, height = 15) p_tracks <- guill_history |>    drop_na(timestamp) |>    filter(suscep == TRUE) |>    filter(agent == last(agent)) |>    ggplot() +   stars::geom_stars(data = spec_imp_map) +   geom_sf(aes(col = scenario)) +   scale_color_brewer(palette = \"Set1\") +   scale_fill_distiller(palette = \"Greys\", direction = 1) +   facet_wrap(~month, ncol = 3) +   labs(title = \"Monthly movement tracks for a sensitive agent\", subtitle = \"Status-quo Vs Impacted scenarios\")  p_tracks ggsave(\"images/tracks_susceptile_agent.png\", p_tracks, width = 15, height = 15)"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-guillemot.html","id":"use-of-counterfactals","dir":"Articles","previous_headings":"Digesting the results","what":"Use of counterfactals","title":"Case Study: guillemot Isle of May","text":"Quantification impact perturbation can done defined agent condition (/history), consenting utility EIAs likely use: Cumulative net energy Season-end body mass mass change Distributions activity/behavioural states Minimum body mass season Mortality single values, distributions representing variability simulated populations. directly informative population level (e.g. mean %-age population lost), distributions tangible -stream calculations. obvious application Population Viability Analyses (PVAs) frequently required EIAs consenting. counterfactuals may use: Increases mortality/proportional reductions population size Relationships body mass reproductive success, alter PVA demographic parameters example, Natural England provide R PVA toolset [nepva]https://github.com/naturalengland/Seabird_PVA_Tool, frequently used consenting, distributions productivity can specified differing scenarios. PVAs provide monte-carlo simulations projected population sizes, matched (impact--baseline) give population-level counterfactuals impacts. DisNBS simulations can used estimate productivities.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Case Study: red-throated diver","text":"use {roamR} simulate movement energetics population common RTD (Gavia stellata) North Sea. broad-scale details {roamR} package, refer general guide, general architecture repeated : simulations cover non-breeding season (9 months, July March) two broad scenarios: environment free -Shore Windfarms (OWFs) - nominally status quo environment many synthetic OWF developments overall intention quantify effects potential displacement developments, based counter-factual comparisons animal’s condition scenarios. keeping architecture {roamR} package, following main components populated: IBM general settings (<ModelConfig>) sundry high-level controls simulation, number agents, broad spatial boundaries, spatial projections, time-steps, start & finish dates. Species-level information (<Species>) distributions governing initial bodymass, behavioural states possible, movement parameters, agents respond environment e.g. avoidance windfarms landmass, costs associated activity. Drivers (<Driver>) descriptions/data define environment agents may interact respond e.g. sea surface temperatures, locations windfarms, coastlines, prey fields etc. extent can populated obviously vary, red-throated chosen population well quantified .e. little detail inputs required simulated . {roamR} intentionally general substantial functionality used simulation. populate various elements simulation turn, turning running simulation post-processing results.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"Case Study: red-throated diver","text":"following {roamR} elements populated, noting little detail: Density maps SST Activity data Energetics Bodyweight Bodymass conversion ) described detail b) specified {roamR} forms following sections. {roamR} can run little data (example data sparse species given alternative test case red-throated divers), results correspondingly less informative stochastic.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"ibm-configuration","dir":"Articles","previous_headings":"Input data","what":"IBM configuration","title":"Case Study: red-throated diver","text":"broad configuration IBM specified via function ModelConfig().interest speed, example simulation large terms number agents run - ’ll opt agents (n_agents), whereas typical run 1000s. non-breeding season animals runs approximately start July 9 months (start_date, end_date). ’ll opt uniform 1km^2 spatial resolution (x_delta, y_delta) everything operate UTM 30N coordinate system (ref_sys). basis ingesting aligning general spatial inputs. Note: package currently requires spatial inputs (e.g. density maps) provided common CRS projection 1. sf package generally used dealing spatial data (interlinked stars package spatio-temporal). Agent start end locations (start_sites, end_sites) must supplied assf objects containing two required columns: id (unique site identifier) prop (proportion agents assigned site). example, use Isle May sole starting location, specified geographic coordinates (longitude/latitude). Note end_sites utilised simulation, meaning movement model assumes agents remain final locations simulation ends. noted earlier, site must re-projected common UTM Zone 30N coordinate reference system. terms bounding entire simulation spatially, ’ve opted semi-arbitrary bounding box around Isle May encompasses large swathe North Sea far west UK, covers bulk RTD density maps. Note hard boundary terms simulations - data outside influence. Passing configuration inputs ModelConfig() creates <ModelConfig> object, assigned rtd_ibm_config:","code":"# Set UTM zone 30N utm30 <- st_crs(32630) # location of colony in long/lat degrees - start/finish locations isle_may <- st_sf(   id = \"Isle of May\",   prop = 1,   geom = st_sfc(st_point(c(-2.5667, 56.1833))),   crs = 4326)   # re-project to UTM 30N isle_may <- st_transform(isle_may, crs = utm30) AoC <- st_bbox(c(xmin = 178831, ymin = 5906535,  xmax = 1174762, ymax = 6783609), crs = st_crs(utm30)) # IBM Settings - assume fixed for these simulations  rtd_ibm_config <- ModelConfig(   n_agents = 4,   ref_sys = utm30,   aoc_bbx = AoC,    delta_x = 1000,   delta_y = 1000,   delta_time = \"1 day\",   start_date = date(\"2025-07-01\"),   end_date = date(\"2025-07-01\") + 270,    start_sites = isle_may )  class(rtd_ibm_config)"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"driver-information---specifying-the-environment","dir":"Articles","previous_headings":"Input data","what":"Driver information - specifying the environment","title":"Case Study: red-throated diver","text":"Drivers define environment agents may interact respond, driver specified via Driver() function. scope defined level knowledge species hand. environmental component can/functionally linked animals behaviour (activity states movement) energetics, must included definition environment via drivers. application common RTD, following drivers required - provided spatio-temporal datacubes (2D rasters giving values x,yx, y locations tt times) agents can query environment x,y,tx, y, t: Monthly species density surfaces, baseline impacted scenarios. Monthly energy intake maps (kJ/h), baseline impacted scenarios. Monthly average Sea Surface Temperature (SST) maps. {roamR} enforces strict requirement input variables accompanied appropriate measurement units. ensures computations performed simulation unit-aware, allowing accurate operations conversions. begin uploading datacubes, assigning measurement units missing. Next specify corresponding drivers, stored list <Driver> objects. Collectively define environment agents move . flexible, might consisted coastal polygons, OWF footprints, prey-fields etc. feasible locations defined density surfaces (coast implicit), OWF implicit “impact” density surfaces.","code":"# driver spatial surfaces  spec_map <- readRDS(\"data/bioss_spec_map.rds\") |>     mutate(density =  units::set_units(density, \"counts\"))  spec_imp_map <- readRDS(\"data/bioss_spec_imp_map.rds\") |>     mutate(density =  units::set_units(density, \"counts\"))  intake_map <- readRDS(\"data/rtd_energy_intake_map.rds\")  imp_intake_map <- readRDS(\"data/rtd_impacted_energy_intake_map.rds\")  sst_map <- readRDS(\"data/bioss_sst_stars.rds\") |>    mutate(sst =  units::set_units(sst, \"degree_Celsius\")) |>    stars::st_warp(crs = sf::st_crs(spec_map), threshold  = 20028) # Set up IBM drivers   dens_drv <- Driver(   id = \"dens\",   type = \"resource\",   descr = \"species dens map\",   stars_obj = spec_map,   obj_active = \"stars\" )  dens_imp_drv <- Driver(   id = \"dens_imp\",   type = \"resource\",   descr = \"species redist map\",   stars_obj = spec_imp_map,   obj_active = \"stars\" )  energy_drv <- Driver(   id = \"energy\",   type = \"resource\",   descr = \"energy map\",   stars_obj = intake_map,   obj_active = \"stars\" )  imp_energy_drv <- Driver(   id = \"imp_energy\",   type = \"resource\",   descr = \"energy impact map\",   stars_obj = imp_intake_map,   obj_active = \"stars\" )   sst_drv <- Driver(   id = \"sst\",   type = \"habitat\",   descr = \"Sea Surface Temperature\",   stars_obj = sst_map,   obj_active = \"stars\" )   # store as list for initialisation rtd_drivers <- list(   dens = dens_drv,   imp_dens = dens_imp_drv,   energy = energy_drv,   imp_energy = imp_energy_drv,   sst = sst_drv )"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"species-information---properties-that-inform-individual-agents","dir":"Articles","previous_headings":"Input data","what":"Species information - properties that inform individual agents","title":"Case Study: red-throated diver","text":"Species-level information defined using Species() function, depends set input objects. clarity modularity, inputs prepared specified beforehand.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"states-profile","dir":"Articles","previous_headings":"Input data > Species information - properties that inform individual agents","what":"States Profile","title":"Case Study: red-throated diver","text":"begin defining behavioural states include model. state represents specific activity, characterized parameters energy expenditure, time allocation, movement speed. States created using State() function. {roamR} supports flexible specification state properties, allowing incorporation stochastic variation population individual (agent) level. include 4 states: flying diving active water (.e. swimming) inactive water (.e. resting) start ‘flight’ state. current simulation, assume energetic cost flying agent varies throughout simulation, following Normal distribution mean 507.6 kJ/h standard deviation of237.6 kJ/h. source figures Elliott et al. (2013). Stochasticity can enter various ways, specify average speed agent fixed simulation (e.g. ’re implying relatively fast/slow animals), agents speeds drawn uniform distribution, specified . ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*12.5)/bm ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*12.5)/bm state representing ‘diving’ activity (Elliott et al. 2013) energy output contingent amount diving. performing day-level calculations, meaning far simulating dive level, can use mean dive-length without loss generality. t_dive populated later tag information. ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*5.1)/bm/60+IFseatemperature<47.2*bm*exp(−0.18)THENadd:(3.47*bm*exp(−0.573)*(differencebetweenSeaTemperatureand47.2*bm*exp(−0.18)))/1000 ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*5.1)/bm/60 + sea temperature < 47.2 * bm*exp(-0.18) add: (3.47*bm*exp(-0.573)*(difference Sea Temperature 47.2 * bm*exp(-0.18)))/1000 TiT_i dive length dive ii minutes. State representing ‘active water’ (Buckingham et al. 2023) linear function SST: ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*3.5)/bm+IFseatemperature<47.2*bm*exp(−0.18)THENadd:(1.532*bm*exp(−0.546)*(differencebetweenSeaTemperatureand47.2*bm*exp(−0.18)))/1000 ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*3.5)/bm + sea temperature < 47.2 * bm*exp(-0.18) add: (1.532*bm*exp(-0.546)*(difference Sea Temperature 47.2 * bm*exp(-0.18)))/1000 aa mean 113 SD 22. bb constant 2.75. State ‘inactive water’ (Buckingham et al. 2023), follows linear function SST, aa mean 72.2 SD 22. bb similarly constant 2.75. ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*1.9)/bm+IFseatemperature<47.2*bm*exp(−0.18)THENadd:(1.532*bm*exp(−0.546)*(differencebetweenSeaTemperatureand47.2*bm*exp(−0.18)))/1000 ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*1.9)/bm + sea temperature < 47.2 * bm*exp(-0.18) add: (1.532*bm*exp(-0.546)*(difference Sea Temperature 47.2 * bm*exp(-0.18)))/1000 combined give list covering states: rtd_states:","code":"# user-defined function returning the energy cost of flying # ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*12.5)/bm    flight_cost_fn <- function(mean, sd){   e <- rnorm(1, mean, sd)   (max(e, 1)) |>     units::set_units(\"kJ/h\") }  flight <- State(   id = \"flight\",    energy_cost = VarFn(     flight_cost_fn,      args_spec = list(mean = 507.6, sd = 237.6),      units = \"kJ/hour\"     ),    time_budget = VarDist(0.056, \"hours/day\"),    speed = VarDist(dist_uniform(10, 20), \"m/s\") ) # define costing function # ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*5.1)/bm/60 + IF sea temperature < 47.2 * bm*exp(-0.18) THEN add: (3.47*bm*exp(-0.573)*(difference between Sea Temperature and 47.2 * bm*exp(-0.18)))/1000  dive_cost_fn <- function(t_dive, alpha_mean, alpha_sd){   alpha <- rnorm(1, alpha_mean, alpha_sd)   (max(alpha*sum(1-exp(-t_dive/1.23))/sum(t_dive)*60, 1)) |>     units::set_units(\"kJ/h\") }   # Construct <State> object dive <- State(   id = \"diving\",    energy_cost = VarFn(     dive_cost_fn,      args_spec = list(t_dive = 1.05, alpha_mean = 3.71, alpha_sd = 1.3),      units = \"kJ/hour\"     ),    time_budget = VarDist(3.11, \"hours/day\"),    speed = VarDist(dist_uniform(0, 1), \"m/s\") ) # ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*3.5)/bm + IF sea temperature < 47.2 * bm*exp(-0.18) THEN add: (1.532*bm*exp(-0.546)*(difference between Sea Temperature and 47.2 * bm*exp(-0.18)))/1000  active_water_cost_fn <- function(sst, int_mean, int_sd){   int <- rnorm(1, int_mean, int_sd)   (max(int-(2.75*sst), 1)) |>     units::set_units(\"kJ/h\") }   # Construct <State> object active <- State(   id = \"active_on_water\",    energy_cost = VarFn(     active_water_cost_fn,      args_spec = list(sst = \"driver\", int_mean = 113, int_sd = 22),      units = \"kJ/hour\"   ),    time_budget = VarDist(10.5, \"hours/day\"),    speed = VarDist(dist_uniform(0, 1), \"m/s\") ) # ((((3.201∗𝑏𝑚*exp(0.71924))+(4.05∗𝑏𝑚*exp(0.791000)∗18.8))/2)*1.9)/bm + IF sea temperature < 47.2 * bm*exp(-0.18) THEN add: (1.532*bm*exp(-0.546)*(difference between Sea Temperature and 47.2 * bm*exp(-0.18)))/1000  inactive_water_cost_fn <- function(sst, int_mean, int_sd){   int <- rnorm(1, int_mean, int_sd)   (max(int-(2.75*sst), 1)) |>     units::set_units(\"kJ/h\") }   inactive <- State(   id = \"inactive_on_water\",    energy_cost = VarFn(     active_water_cost_fn,      args_spec = list(sst = \"driver\", int_mean = 72.2, int_sd = 22),      units = \"kJ/hour\"   ),    time_budget = VarDist(10.3, \"hours/day\"),    speed = VarDist(dist_uniform(0, 1), \"m/s\") ) rtd_states <- list(   flight = flight,   dive = dive,   active = active,   inactive = inactive )"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"driver-responses","dir":"Articles","previous_headings":"Input data > Species information - properties that inform individual agents","what":"Driver Responses","title":"Case Study: red-throated diver","text":"section, define species-level, agent-specific responses environmental drivers introduced defined earlier. RTD model, assign density drivers - identified \"dens\" (baseline) \"dens_imp\" (impacted) - primary determinants agent movement (density maps per Buckingham et al. (2022)). scenario, also specify probability agent influenced respective driver. baseline case, agents “respond” density map movement. driver \"dens_imp\", probability reflects likely agent respond OWF installation (Peschko et al. 2024) - hence influence map differs.","code":"resp_dens <- DriverResponse(   driver_id = \"dens\",   movement = MoveInfluence(     prob = VarDist(distributional::dist_degenerate(1)),     type = \"attraction\",     mode = \"cell-value\",     sim_stage = \"bsln\"   ) )  resp_imp_dens <- DriverResponse(   driver_id = \"dens_imp\",   movement = MoveInfluence(     prob = VarDist(distributional::dist_normal(0.67, sd = 0.061)),     type = \"attraction\",     mode = \"cell-value\",     sim_stage = \"imp\"   ) )"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"create-the-species-object","dir":"Articles","previous_headings":"Input data > Species information - properties that inform individual agents","what":"Create the <Species> object","title":"Case Study: red-throated diver","text":"addition parameters defined , set remaining species-level properties, including body mass distribution (used initialise agent’s body mass) energy--mass conversion rate (Dunn et al. 2022), assumed constant across agents simulated time steps. distribution bodymass start breeding season drawn/inferred Duckworth (2023).","code":"rtd <- Species(   id = \"rtd\",   common_name = \"red throated diver\",   scientific_name = \"Gavia stellata\",   body_mass_distr = VarDist(dist_normal(mean = 2000, sd = 160), \"g\"),   energy_to_mass_distr = VarDist(0.072, \"g/kJ\"),   states_profile = rtd_states,   driver_responses = list(resp_dens, resp_imp_dens) )"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"setting-up-and-running-the-ibm","dir":"Articles","previous_headings":"","what":"Setting up and running the IBM","title":"Case Study: red-throated diver","text":"Now key components IBM specified, {roamR} can used initialisation running simulations.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"initialisation","dir":"Articles","previous_headings":"Setting up and running the IBM","what":"Initialisation","title":"Case Study: red-throated diver","text":"intialisation stage performs two main tasks prior running: checking inputs conformity, adjustments (e.g. clipping AoC) derivation vector fields needed. generation n_agents indicated model config object.","code":"set.seed(1009)  rtd_ibm <- xfun::cache_rds({   rmr_initiate(   model_config = rtd_ibm_config,   species = rtd,   drivers = rtd_drivers )  })"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"running-the-simulation","dir":"Articles","previous_headings":"Setting up and running the IBM","what":"Running the simulation","title":"Case Study: red-throated diver","text":"running simulation involves moving initialised agents defined environment, monitoring condition time determining responses . Parallelisation dealt (assumed generally used) individual agents piped independent threads calculation. furrr package handles parallelisation, usually number workers slightly less available allow scope tasks without saturating computer. Much parameterisiation data previous sections encapsulated within ibm object (rtd_ibm) passed simulation. Several additional parameters per documentation can entered needed. specify: state(s) feeding states resting states - state-balancing calculations (refer main documentation) increase/decrease required feed_avg_net_energy average net energy per unit feeding - tuning parameter, caclcuable directly energy required balance energetics equations average agent. target_energy objective state rebalancing terms daily energy. modest increase attempted, based figures indicating modest gain non-breeding season. smooth_body_mass use-defined function convert energy time-series mass. mass deposition occurs function preceding 7 days energy intake.","code":"plan(multisession, workers = 2)  rtd_results <- xfun::cache_rds({   run_disnbs(   ibm = rtd_ibm,   run_scen = \"baseline-and-impact\",    dens_id = \"dens\",    intake_id = \"energy\",    imp_dens_id = \"dens_imp\",    imp_intake_id = \"imp_energy\",    feed_state_id = \"diving\",    roost_state_id = \"inactive_on_water\",    feed_avg_net_energy = units::set_units(422, \"kJ/h\"),    target_energy = units::set_units(1, \"kJ\"),    smooth_body_mass = bm_smooth_opts(time_bw = \"7 days\"),    waypnts_res = 1000,    seed = 1990 )  })  plan(sequential)"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"digesting-the-results","dir":"Articles","previous_headings":"","what":"Digesting the results","title":"Case Study: red-throated diver","text":"{roamR} records extensive amount information running monitoring agents. primary output list, one element agent. stored agents consist three main components (class, per package schema): properties - drawn/set intialisation simulation species definition, remain constant throughout condition - specific condition agent point simulation. final condition simulation completes. history - detailed record elements agent’s condition throughout simulation. Spatiotemporally stamped, includes post-processed energy--mass conversions. form basis downstream calculations based simulation outputs. impact scenarios play, one list, agents paired impact scenarios e.g. baseline versus impact. can examine agent’s simulation histories directly - two scenarios, containing number agents:","code":"# two scenarios   names(rtd_results)  # several agents within each   length(rtd_results$agents_bsln)  # one agents history rtd_results$agents_bsln[[1]]@history"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"comparing-scenarios","dir":"Articles","previous_headings":"Digesting the results","what":"Comparing scenarios","title":"Case Study: red-throated diver","text":"extract history agents two scenarios comparison. agents scenarios combined one dataset.","code":"# gather history from all agents, under the 2 scenarios, into one data frame rtd_history <- map(rtd_results, function(scn){   map(scn, ~.x@history) |>    setNames(1:rtd_ibm_config@n_agents) |>    list_rbind(names_to = \"agent\")  }) |>    setNames(c(\"status-quo\", \"impact\")) |>    list_rbind(names_to = \"scenario\") |>    mutate(     Date = as.Date(timestamp),      agent = as.numeric(agent),     month = lubridate::month(timestamp)   )  # add information on whether agents are susceptible to be influenced by the impact infl <- tibble(   agent = 1:rtd_ibm_config@n_agents,   suscep = purrr::map_lgl(rtd_ibm@agents, ~.x@properties@move_influences$dens_imp$infl) == TRUE )  rtd_history <- left_join(rtd_history, infl, by = \"agent\") |> st_as_sf()  rtd_history"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"bodymass-traces","dir":"Articles","previous_headings":"Digesting the results > Comparing scenarios","what":"Bodymass traces","title":"Case Study: red-throated diver","text":"can examine small number agents graphically - bodymass histories implied simulated energetics. Note {roamR} heart simulates energetics, conversion functions energy mass specified user.","code":"p_bdm <- rtd_history |>    ggplot() +   geom_line(aes(x = Date, y = body_mass_smooth, col = scenario), linewidth = 1) +   scale_color_brewer(palette = \"Set1\") +   theme(legend.position = \"bottom\") +   facet_wrap(~agent, ncol = 2, scales = \"free\")    p_bdm  ggsave(\"images/bodymass.png\", p_bdm, width = 12, height = 12)"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"agent-tracks","dir":"Articles","previous_headings":"Digesting the results > Comparing scenarios","what":"Agent tracks","title":"Case Study: red-throated diver","text":"Similarly movement tracks select agents time can visualised, two impact scenarios. separate property agent - assigned susceptibility OWF agent initialisation - recalling stochastic specification species level.","code":"p_tracks <- rtd_history |>    drop_na(timestamp) |>    filter(suscep == FALSE) |>    filter(agent == last(agent)) |>    ggplot() +   stars::geom_stars(data = spec_imp_map) +   geom_sf(aes(col = scenario)) +   scale_color_brewer(palette = \"Set1\") +   scale_fill_distiller(palette = \"Greys\", direction = 1) +   facet_wrap(~month, ncol = 3) +   labs(title = \"Monthly movement tracks for a non-sensitive agent\", subtitle = \"Status-quo Vs Impacted scenarios\")    p_tracks  ggsave(\"images/tracks_non_susceptile_agent.png\", p_tracks, width = 15, height = 15) p_tracks <- rtd_history |>    drop_na(timestamp) |>    filter(suscep == TRUE) |>    filter(agent == last(agent)) |>    ggplot() +   stars::geom_stars(data = spec_imp_map) +   geom_sf(aes(col = scenario)) +   scale_color_brewer(palette = \"Set1\") +   scale_fill_distiller(palette = \"Greys\", direction = 1) +   facet_wrap(~month, ncol = 3) +   labs(title = \"Monthly movement tracks for a sensitive agent\", subtitle = \"Status-quo Vs Impacted scenarios\")  p_tracks  ggsave(\"images/tracks_susceptile_agent.png\", p_tracks, width = 15, height = 15)"},{"path":"https://dmpstats.github.io/roamR/articles/case-study-RTD.html","id":"use-of-counterfactals","dir":"Articles","previous_headings":"Digesting the results","what":"Use of counterfactals","title":"Case Study: red-throated diver","text":"Quantification impact perturbation can done defined agent condition (/history), consenting utility EIAs likely use: Cumulative net energy Season-end body mass mass change Distributions activity/behavioural states Minimum body-mass season (relatedly) Mortality single values, distributions representing variability simulated populations. directly informative population level (e.g. mean %-age population lost), distributions tangible -stream calculations. obvious application Population Viability Analyses (PVAs) frequently required EIAs consenting. counterfactuals may use: Increases mortality/proportional reductions population size Relationships body mass reproductive success, alter PVA demographic parameters example, Natural England provide R PVA toolset [nepva]https://github.com/naturalengland/Seabird_PVA_Tool, frequently used consenting, distributions productivity can specified differing scenarios. PVAs provide monte-carlo simulations projected population sizes, matched (impact--baseline) give population-level counterfactuals impacts. DisNBS simulations can used estimate productivities.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/articles/initialization_walkthrough.html","id":"create-the-species-object","dir":"Articles","previous_headings":"","what":"Create the <Species> object","title":"IBM initiatization Walk-through","text":"Arguments required","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"`roamR` - package overview","text":"roamR R package offers toolset framework running Individual Based Models (IBMs - Agent-Based Models). created part DisNBS project (Distribution seabirds Non-Breeding Season) project within Offshore Renewables Joint Industry Partnership programme (ORJIP). project specific goals relation Offshore Wind Farms (OWF) potential effects seabirds, problem quite general. package helps build animal movement simulations, general problem broken logical components, imposes level transparent formality. places computational components common footing, leaving focus parametrisation inputs/data. IBMs simple principle - simulate movement individual animals response environment measure properties e.g. body-mass. particularly useful analytical modelling difficult “-” scenarios sought, meaning system can examined /without speculative perturbation. also accommodate stochasticity/uncertainty quite naturally. Typically many simulated agents run uncertainty inputs reflected measured outputs, conclusions tempered accordingly. DisNBS project motivating example package development, seeks simulate seabirds non-breeding season (extant IBM tool SeaBORD covers breeding season), explore quantify effects speculative OWF development scenarios. ultimate output generic IBM (terms UK seabirds) predicting demographic effects displacement seabird species non-breeding season","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"ibm-design-disnbs-workpackage-1","dir":"Articles","previous_headings":"Introduction","what":"IBM design (DisNBS workpackage 1)","title":"`roamR` - package overview","text":"DisNBS started design phase, underpinned expert consultation workshop. resulting generic structure presented figure 1, roamR package implements. demography submodel formally part IBM, energetics body mass distributions generated inform -stream calculations.following document high-level description fo functionality within roamR package, encompasses design elements figure 1. `","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"package-overview","dir":"Articles","previous_headings":"Introduction","what":"Package overview","title":"`roamR` - package overview","text":"roamR written R using S4 classes (refer overview later section) structured/implemented simulations well defined, lot flexibility components can . S4 programming imposes level formality programming helps make software robust. Animal IBMs spatiotemporal can based disparate data sources - roamR particular treatment space (projections etc), time units generally (found units package). package written seabirds motivating case, generally animals (indeed one main classes Species), noting agnostic term agent applies. brief - roamR: defines general characteristics type agent (species definition) defines environment agent interacts , functionally affects movement behaviour defines agents move, consideration environment, behavoural state, body condition defines behaviours animals may engage change creates many agents stochastic properties line species definition runs agents simulated environment time, defined temporal resolution measures agents throughout simulation gives tools query condition agents simulated principal limitation IBMs level information available parameterize agents behave. roamR intended function well across data support spectrum (.e. information poor information rich). test cases cover range data support: Relatively data rich: Guillemots Isle May, well studied. Relatively data poor: Red-Throated Divers North Sea, less understood. extreme information end, roamR developed simulate agents detailed level, example population extensive GPS tagging information. exemplar guided Hidden Markov Model McClintock & Michelot (2018) subsequent fitting detailed Fulmar track data.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"r-and-s4-programming","dir":"Articles","previous_headings":"Introduction","what":"R and S4 programming","title":"`roamR` - package overview","text":"package assumes least minor familiarity R. use simulating birds context OWF illustrated using markdown associated example scenarios - avoiding need detailed R programming knowledge. examples give steps required can modified followed new cases. However, even within use-case unavoidable user-defined functions required: example energetics equations particular species’ activity states. lot features package extend well beyond OWF seabird examples, require deeper understanding R order fully use . particular familiarity S4 useful want use package beyond narrow path bird IBMs motivated package. Regardless, basic S4 information useful bear mind: well-defined classes many components simulation - R objects often contain slots access name @ operator, opposed $ common simple R objects. Classes prescriptive can contain, means things robust deviations rejected e.g. data required stars object, store something else lot background checks conformity (), scrutinised various levels prevented outside expectations. example, spatial elements must carry coordinate references systems projections, units must specified many inputs.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"dependencies","dir":"Articles","previous_headings":"Introduction","what":"Dependencies","title":"`roamR` - package overview","text":"package written intention dependencies packages. dependencies needed chosen stability longevity mind .e. well maintained programmed, differing options available. Notable examples : sf (simple features) package, widely well regarded spatial work encompasses much functionality packages. stars packages dealing spatiotemporal data structures, characteristic much data required animal movement IBMs. Note: units package used heavily. Many parameters data elements must units measurement specified. one several formalities package imposes, minimise careless errors make simulations well defined. help files state requirements apply.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"packageclass-hierarchy","dir":"Articles","previous_headings":"","what":"Package/class hierarchy","title":"`roamR` - package overview","text":"great deal thought gone hierarchical structure, means mainly classes, relate one another therefore data (including parameters) lies within . summarised figure :  Key elements discussed turn, examples given associated test scenarios. Four main areas covered: simulation engine wrapper - offering high-level controls, like number agents, spatial/temporal boundaries (e.g. bounding box, distinct environmental constraints simulation, fundamental spatial coordinate system species - properties population simulated e.g. distributions initial body mass, flying speeds. often distributional, agents/individuals generate . environment - spatiotemporal descriptions agent’s environment within simulation frame e.g. natural boundaries (coast), Sea Surface Temperature (SST) time, man-made structures (e.g. OWF) agents - basic simulation element, largely defined higher components, basis monitoring simulation counterfactuals","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"general-workflow-to-createrun-an-ibm","dir":"Articles","previous_headings":"Package/class hierarchy","what":"General workflow to create/run an IBM","title":"`roamR` - package overview","text":"workflow create/populate roamR IBM essence: Configure simulation high-level, including spatial temporal boundaries, projections, number agents etc. Define species, example initial body mass distributions, flight speed distributions, activity states energetic implications, functional relationships species environment e.g. SST affects energy, OWFs influence movement/distribution. Define environment, essentially anything spatio-temporal animals thought respond - coastline, man-made structures (e.g. OWF), prey distributions, SST, bathymetry etc. Combine components IBM object. Run simulation, creates agents, parallelises calculations, moves agents environment, records properties time. Alter simulation elements reflect perturbation (presence OWF). Re-run simulation perturbation. Query simulated animals, counterfactuals based within-agent comparisons perturbation scenarios. key classes require population workflow expanded upon turn.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"the-high-level-control-modelconfig-class","dir":"Articles","previous_headings":"","what":"The high level control (ModelConfig, class)","title":"`roamR` - package overview","text":"component provides high-level configurations simulation, spatial temporal boundaries, spatiotemporal resolution, number agents simulate, projection spatial data, general parameters define simulation environment. also includes start finish points simulated animals, return--colony behaviour required. Consideration setting follows. Bounding Box (aoc_bbx) spatial extent agents constrained within. many cases simply dictated data, example density distribution animal simulated. animals low probability beyond data, bounding box constraint logical progression. cases might set knowledge maximum range animal’s home range. important note movement outside permitted - box sufficiently large controversially influential .e. err large side given inputs dictate travel. also bound spatiotemporal inputs, data inputs clipped region. potential consequence making bounds large large amounts data retained needlessly. Spatial Resolution (delta_x, delta_y) defines resolution spatiotemporal datacubes underpin IBM. Note, define resolution movements agent, just resolution data describing environment. can simply set match finest scale input data, cost size data carried forwards. Temporal Bounds (start_date, end_date) nominal period simulation applies . care needed input data covers period. example, simulation envisaged running future, temporal inputs similarly nominally period e.g. using historic SST data, needs timestamped projected simulation period. Number agents (n_agents) strong guidance , considered choice. general rule thumb better (similar computer intensive inference) “large”. Note, amount calculation, hence time run simulation, linear regards . Similarly agents tracked stored detail, may result non-negligible storage sizes. Ultimately outputs distributions metrics agents, sufficient needed characterise distributions well/stably. balance computation time accuracy distribution shape may needed, computation time large - else just select large number. number agents need match number individuals population simulated, represent sample potential realities animals computer-intensive inference.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"defining-the-species-species-class","dir":"Articles","previous_headings":"","what":"Defining the species (Species class)","title":"`roamR` - package overview","text":"provides general features realised agents, either stochastically (e.g. initial body mass) /functional relationships environment (e.g. SST affects energy expenditure). named species considered population depending context e.g. parameters known colony level, potentially different colonies. [Note package also varDist class, gives common interface setting stochasticity, based distributional package] Labels (id, common_name, scientific_name) used identify species simulation, can used query simulation results. used functional way, useful labelling outputs queries. Body mass (body_mass_distr) distribution initial body mass agents, can defined VarDist object. used initialise agents body mass reflects population simulated. distribution can defined using supported distributions VarDist, normal, log-normal, gamma distributions. Mortality Threshold (mortality_thresh_distr) defines thresholds agents considered died, based body mass. Note, agents nominally tracked simulation even marked dead. allows post-processing relationships explored, defining fatality function time spent %-age starting body mass. Population Size (pop_size) nominal size population simulated, can used optionally scale results simulation. Activity States (activity_states) list ActivityState objects, define different states agents can , foraging, resting, flying. state name, distribution body mass loss, distribution flight speed. states can defined different distributions different species, can used model behaviour agents simulation. Response Environment (driver_responses) custom defined functions relate species (therefore agent) behaviour regards environment, represented Driver class. flexible element simulation, expanded upon .","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"driver-responses","dir":"Articles","previous_headings":"Defining the species (Species class)","what":"Driver responses","title":"`roamR` - package overview","text":"key element IBM responsiveness agents environment, includes standard biological factors prey distributions, bathymetry coastlines. Treated generally, also includes anthropogenic factors OWF, focus perturbation scenarios explored IBM. collectively termed drivers, drive agents behaviour, including movement, activity states extension distribution energetics. drivers encompassed Driver class , might general species-specific. within Species class, link environment made explicit species-specific. broad can encompass, user-defined. example: Relationships movement proximity coast. coast movement driver case distance coast, calculated internally coastline polygons. correlated random walk movement model fundamentally direction speed, sharply declining driver response influences agents away coastlines. Relationships movement OWF. coast movement driver case internally calculated distance development(s), driver function can call properties development e.g. height turbines, simulating line--sight influences similar. Relatedly, can simply barrier effect - agent pass OWF footprint/polygon (noting specified proportion agents can set sensitive OWF, also species definition).","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"states-activity-budgets-and-rebalancing","dir":"Articles","previous_headings":"Defining the species (Species class)","what":"States: activity budgets and rebalancing","title":"`roamR` - package overview","text":"possible activity states agents defined within species definition . design element IBM daily activity budget (time spent state) fixed, can responsive environment agent condition. roamR allows “state rebalancing” daily basis, rationale agents attempt compensate poor foraging say, increasing amount time dedicated feeding. roamR allows state distribution dependent previous day’s net energy intake. achieve , target daily net energy specified e.g. species thought similar weights beginning end season, target zero. day poor energy intake attempt compensated , subsequent increase time spend feeding. adjustment made : change activity budget average balance previous days’ intake energy target. Note exact, daily energy intake achieved subject stochastic elements. changes activity seek energy balance primarily increasing/decreasing feeding resting times. Agents constrained rest overnight, based day length calculations agent’s location time. activities outside explicit feeding resting scaled accordingly, full day’s activities defined (.e. probability distribution day maintained).","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"defining-the-environment-driver-class","dir":"Articles","previous_headings":"","what":"Defining the environment (Driver class)","title":"`roamR` - package overview","text":"Information simulated environment might influential agent’s behaviour encapsulated Driver class. Generally spatiotemporal data cubes (data structure effectively series maps stacked time), agents can query time location. actual information contained within driver can varying detail (e.g. low spatial resolution, fixed time, highly detailed spatial information varies time) interface consistent: agent queries relevant drivers location xx, yy time tt.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"vector-fields","dir":"Articles","previous_headings":"Defining the environment (Driver class)","what":"Vector fields","title":"`roamR` - package overview","text":"Generally animals simply responsive immediate environment, example favoured feeding grounds immediately within sensory range. roamR includes calculation vector fields, give direction slope point provided surface. conjunction driver response functions, allows IBM direct movement environment towards distant favoured regions, conversely away. Distance direction nearest OWF development, coastline particular examples.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"the-basic-unit-agent-class","dir":"Articles","previous_headings":"","what":"The basic unit (Agent class)","title":"`roamR` - package overview","text":"agents within simulation treated self-contained entities, moved measured environment subject individual properties. specified number agents created start simulation, properties defined Species class. Initialisation agents done sampling distributions defined Species class, initial body mass, flight speed, activity state.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"agent-properties","dir":"Articles","previous_headings":"The basic unit (Agent class)","what":"Agent properties","title":"`roamR` - package overview","text":"initialisation, following (non-exhaustive) properties generated agent. fixed throughout simulation, fundamental agent simulated season: initial_mass ⁠units⁠ object, agent’s body mass start simulation. speeds named list, defining movement speed properties agent. element specifies agent’s average speed given movement state (e.g. flying, swimming, etc). List elements must type ⁠units⁠. start_point, end_point objects spatial class XY, spatial coordinates agent start end simulation, respectively. mortality_thresh ⁠units⁠ object, threshold body mass agent assumed die. move_influences named list, defining whether agent influenced model drivers. element corresponds driver_id (must defined model’s Driver object) contains single-row data.frame columns: p: numeric, providing probability agent influenced named driver. infl: logical, whether agent influenced driver. determined via Bernoulli trial probability p. state_influences named list, defining whether agent states influenced model drivers. element, named driver_id, contains data.frame columns: state_id: character string, unique identifier agent’s state. p: numeric, probability agent’s state_id influenced driver. infl: logical, whether agent’s state_id influenced driver. determined via Bernoulli trial probability p.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"agent-condition","dir":"Articles","previous_headings":"The basic unit (Agent class)","what":"Agent condition","title":"`roamR` - package overview","text":"agent’s condition dynamic aspect simulation, updated time-step. includes agent’s current location, body mass, activity states, properties change time. condition updated based agent’s movement, activity states, interactions environment: location object class XY, specifying agent’s spatial coordinates end current time-step. grid_cell object class XY, representing AOC’s grid-cell occupied agent. timestep integer, indicating current simulation time-step index. timestamp ⁠POSIXct⁠ object, date-time end current time-step. body_mass ⁠units⁠ object, defining agent’s body mass end current time-step. states_budget named list, detailing agent’s time allocation across different behavioural/activity states time-step. element (type ⁠units⁠) named specific state stores duration (e.g. hours) agent spent state. states_cost named list, specifying energy costs (e.g. KJ/hr/g) associated state defined state_budget. List elements type ⁠units⁠. mortality_prob numeric, probability agent dying within current time-step (currently ignored). alive logical value (TRUE alive, FALSE dead), indicating whether agent survived time-step. track object class sf, storing time-series location points tracking agent’s movement within current time-step. energy_expenditure ⁠units⁠ object, representing total energy (e.g. KJ/g) expended across states time-step. foraging_success ⁠units⁠ object, mass prey (e.g. grams) consumed agent current time-step. mass_change_value ⁠units⁠ object, capturing net change agent’s body mass (e.g., grams) current time-step.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"agent-history","dir":"Articles","previous_headings":"The basic unit (Agent class)","what":"Agent history","title":"`roamR` - package overview","text":"agent’s condition generally dynamic throughout simulation can sufficient answer questions motivating IBM e.g. body mass end season. generally however, full record may sought agent class contains history component stores agent’s condition spatiotemporal data structure. allows examination movement, time spent behaviour states, physical condition etc point time.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"moving-agents-running-the-simulation-ibm-class","dir":"Articles","previous_headings":"","what":"Moving agents, running the simulation (IBM class)","title":"`roamR` - package overview","text":"Fundamental IBM movement agents. Currently roamR supports two movement models, different data/input requirements: one relatively simple requiring basic knowledge animals speed movement, demanding correlated random walk require detailed tracking data parameter estimation Hidden Markov Model (HMM). choice clear - support fine-scale movement model, simpler model necessarily chosen turning angle, step length correlations able populated.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"movement-models","dir":"Articles","previous_headings":"Moving agents, running the simulation (IBM class)","what":"Movement models","title":"`roamR` - package overview","text":"Two agent movement methods supported, presented order complexity/data requirements. Density-informed method uses density information generate stochastic destinations agents, combined activity budgets basic speed information give travel paths. process : Use species’ density information likelihood fashion generate target destination agent .e. high density areas relatively likely chosen. Determine feasible path current location destination - feasible meaning path cross barriers apply driver response functions (e.g. OWF, coastlines) within bounding box simulation. agents travel along path constrained/dictated agent’s speed properties activity budget time, example hour flying within day coupled average speed used calculate expected travel distances, assumed random walk properties. Iteratively regenerate destinations paths Correlated Random Walk (CRW) method commonplace movement simulation literature, consists iteratively generating stochastic movement directions, making stochastic step. distributions can impose dependencies provide directed random walk, related local drivers, functionally responsive environment. process primarily: Select stochastic movement direction based circular distribution (wrapped Normal roamR). mean (direction) distribution may functionally related local conditions e.g. vector field giving distance direction OWF. variance distribution imposes correlation (low variance directed movements). Select stochastic step length based distribution (e.g. gamma). Iterate. properties movement can made state dependent e.g. flying (fast directed), resting (stationary) - depending species definition. second movement models data intensive, requiring detailed tracking information parameterise.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"agent-evaluations","dir":"Articles","previous_headings":"Moving agents, running the simulation (IBM class)","what":"Agent evaluations","title":"`roamR` - package overview","text":"movement step agents evaluated, includes simple location, storing calculating multiple properties: location time Activity state(s) cumulative net energy - based user definitions, generally function environment activity state e.g. amount time feeding state, stochastic energy loss combined local SST balanced energy intake. Direction travel, speed, depending movement model. Agent body mass, depending population energy--mass conversion functions Additionally, state transitions next step may calculated - described state balancing section previously, t+1t+1 activity states related energy intakes time tt.","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"`roamR` - package overview","text":"principal use IBM run counterfactuals, simulation run without perturbation, presence OWF. run roamR paired fashion: agents used scenarios, changes imposed definitions environment. Maintaining random seed sequence cases means paired agents start properties, subject stochastic influences except perturbation creates changes. Quantification impact perturbation can done defined agent condition (/history), likely differences : Cumulative net energy Season-end body mass mass change Distributions activity/behavioural states Minimum body mass season Mortality mass-agent IBM, single values, distributions representing variability simulated populations e.g. distribution differences end--season body mass baseline compared OWF perturbation. directly informative population level, tangible -stream calculations. example, passed Population Viability Analyses (PVAs) counterfactuals may use: Increases mortality/proportional reductions population size Relationships body mass reproductive success, alter PVA demographic parameters","code":""},{"path":"https://dmpstats.github.io/roamR/articles/roamR-guide.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"`roamR` - package overview","text":"McClintock BT, Michelot T (2018). “momentuHMM: R package generalized hidden Markov models animal movement.” Methods Ecology Evolution, 9(6), 1518-1530. doi:10.1111/2041-210X.12995, http://dx.doi.org/10.1111/2041-210X.12995.","code":""},{"path":"https://dmpstats.github.io/roamR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carl Donovan. Author. Bruno Caneco. Author, maintainer.","code":""},{"path":"https://dmpstats.github.io/roamR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Donovan C, Caneco B (2025). roamR: Seabird IBM Non-Breeding Season. R package version 0.0.0.9000, https://dmpstats.github.io/roamR/.","code":"@Manual{,   title = {roamR: Seabird IBM For Non-Breeding Season},   author = {Carl Donovan and Bruno Caneco},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://dmpstats.github.io/roamR/}, }"},{"path":"https://dmpstats.github.io/roamR/index.html","id":"welcome-to-the-roamr-package","dir":"","previous_headings":"","what":"Seabird IBM For Non-Breeding Season","title":"Seabird IBM For Non-Breeding Season","text":"roamR R package offers toolset framework running Individual Based Models (IBMs - Agent-Based Models). created part DisNBS project (Distribution seabirds Non-Breeding Season) project within -shore Renewables Joint Industry Partnership programme (ORJIP). project specific goals relation -shore Wind Farms (OWF) potential effects seabirds, problem quite general. package can help build animal movement simulations, general problem broken logical components imposes level transparent formality, computational components common footing, leaving focus parametrisation inputs/data. roamR written S4 structured/implemented simulations well defined, lot flexibility components can . Animal IBMs spatio-temporal can based disparate data sources - roamR particular treatment space (projections etc), time units generally (found units package). package written animals mind (indeed one main classes Species), ’ll use agnostic term agent. brief - roamR: defines environment animal interacts , functionally affects movement behaviour defines animals move, consideration environment, behavoural state, condition defines behaviours animals may engage change defines general characteristics type agent (species definition) creates many agents stochastic properties line species definition runs agents simulated environment time, defined temporal resolution measures agents throughout simulation gives tools query mass agents simulated principal limitation IBMs level information agents behave. roamR intended work little information, information rich. test cases cover range data support: Relatively data rich: Guillemots Isle May, well studied. Relatively data poor: Red-Throated Divers North Sea, less understood. extreme, roamR developed intention simulating well known animal populations, example population extensive GPS tagging information, might suffice estimation Hidden Markov Model. example demonstrated Michelot XXX fitted Fulmar, subsequently simulated momentHMM package.","code":""},{"path":"https://dmpstats.github.io/roamR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Seabird IBM For Non-Breeding Season","text":"can install development version roamR like :","code":"# FILL THIS IN! HOW CAN PEOPLE INSTALL YOUR DEV PACKAGE?"},{"path":"https://dmpstats.github.io/roamR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Seabird IBM For Non-Breeding Season","text":"basic example shows solve common problem:","code":"library(roamR) ## basic example code"},{"path":"https://dmpstats.github.io/roamR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 roamR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Agent-class.html","id":null,"dir":"Reference","previous_headings":"","what":"<Agent> — Agent-class","title":"<Agent> — Agent-class","text":"<Agent> S4 class encapsulating biological physiological properties historical status individual agent within simulated IBM. uses classes <AgentCondition> <AgentProperties>, also collating historical record agent's movement state properties generated throughout simulation.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Agent-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"<Agent> — Agent-class","text":"condition object class <AgentCondition>, describing agent's condition end current simulation time-step. properties object class <AgentProperties>, defining attributes agent remain constant throughout simulation. history object class sf, storing historical data comprising agent's state spatio-temporal activity time-step simulation.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/Agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Create <Agent> objects — Agent","title":"Create <Agent> objects — Agent","text":"Agent() helper function constructing instances Agent objects. relies predefined classes <Species> <ModelConfig> objects initiate slots accordingly.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create <Agent> objects — Agent","text":"","code":"Agent(species = NULL, model_config = NULL)"},{"path":"https://dmpstats.github.io/roamR/reference/Agent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create <Agent> objects — Agent","text":"species object class <Species>, specifying agent's species-level properties. NULL (default), species-related slots <Agent> initialized empty. model_config object class <ModelConfig>, defining IBM's configuration. NULL (default), model-related slots <Agent> initialized empty.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/AgentCondition-class.html","id":null,"dir":"Reference","previous_headings":"","what":"<AgentCondition> — AgentCondition-class","title":"<AgentCondition> — AgentCondition-class","text":"<AgentCondition> S4 class describing status agent end simulation delta_time (e.g. end day). encapsulates key spatio-temporal physiological metrics, including location, body mass, energy expenditure, state budgets, survival status.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/AgentCondition-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"<AgentCondition> — AgentCondition-class","text":"Currently class intended internal use within model, expected user-facing.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/AgentCondition-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"<AgentCondition> — AgentCondition-class","text":"location object class XY, specifying agent's spatial coordinates end current time-step. grid_cell object class XY, representing AOC's grid-cell occupied agent (currently ignored). timestep integer, indicating current simulation time-step index. timestamp <POSIXct> object, date-time end current time-step. body_mass <units> object, defining agent's body mass end current time-step. states_budget named list, detailing agent's time allocation across different behavioural/activity states time-step. element (type <units>) named specific state stores duration (e.g. hours) agent spent state. states_cost named list, specifying energy costs (e.g. KJ/hr) associated state defined state_budget. List elements type <units>. energy_expenditure <units> object, representing total energy (e.g. KJ/g) expended across states time-step. foraging_success <units> object, mass prey (e.g. grams) consumed agent current time-step. mass_change_value <units> object, capturing net change agent’s body mass (e.g., grams) current time-step. mortality_prob numeric, probability agent dying within current time-step (currently ignored). alive logical value (TRUE alive, FALSE dead), indicating whether agent survived time-step. track object class sf, storing time-series location points tracking agent's movement within current time-step.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/AgentCondition.html","id":null,"dir":"Reference","previous_headings":"","what":"Create <AgentCondition> objects — AgentCondition","title":"Create <AgentCondition> objects — AgentCondition","text":"AgentCondition() helper function construct instances [AgentCondition-class] objects, carries status agent end simulation delta_time (e.g. end day).","code":""},{"path":"https://dmpstats.github.io/roamR/reference/AgentCondition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create <AgentCondition> objects — AgentCondition","text":"","code":"AgentCondition(   location = sf::st_point(),   grid_cell = sf::st_point(),   timestep = NA_integer_,   timestamp = as.Date(NA),   body_mass = NA_real_,   states_budget = list(),   states_cost = list(),   mortality_prob = NA_real_,   alive = NA,   track = sf::st_sf(timestamp = as.POSIXct(NA), geom = sf::st_sfc(sf::st_point())) )"},{"path":"https://dmpstats.github.io/roamR/reference/AgentCondition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create <AgentCondition> objects — AgentCondition","text":"location object class XY, specifying agent's spatial coordinates end current time-step. grid_cell object class XY, representing AOC's grid-cell occupied agent. timestep integer, indicating current simulation time-step index. timestamp <POSIXct> object, date-time end current time-step. body_mass <units> object, defining agent's body mass end current time-step. states_budget named list, detailing agent's time allocation across different behavioural/activity states time-step. element (type <units>) named specific state stores duration (e.g. hours) agent spent state. states_cost named list, specifying energy costs (e.g. KJ/hr) associated state defined state_budget. List elements type <units>. mortality_prob numeric, probability agent dying within current time-step (currently ignored). alive logical value (TRUE alive, FALSE dead), indicating whether agent survived time-step. track object class sf, storing time-series location points tracking agent's movement within current time-step. energy_expenditure <units> object, representing total energy (e.g. KJ/g) expended across states time-step. foraging_success <units> object, mass prey (e.g. grams) consumed agent current time-step. mass_change_value <units> object, capturing net change agent’s body mass (e.g., grams) current time-step.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/AgentProperties-class.html","id":null,"dir":"Reference","previous_headings":"","what":"<AgentProperties> — AgentProperties-class","title":"<AgentProperties> — AgentProperties-class","text":"<AgentProperties> S4 class specifying individual-level properties agent traced simulation model. subsumes features remain constant throughout simulation run, including biological traits, average travelling speeds, initialization final locations, susceptibility movement states model drivers. Currently \"internal\" class, .e. meant user-facing.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/AgentProperties-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"<AgentProperties> — AgentProperties-class","text":"species_id character, identifier code agent's species. initial_mass <units> object, agent's body mass start simulation. speeds named list, defining movement speed properties agent. element specifies agent's average speed given movement state (e.g. flying, swimming, etc). List elements must type <units>. cost_par_draws named list bla start_point,end_point objects class XY, spatial coordinates agent start end simulation, respectively. agent assumed die. mortality_thresh <units> object, threshold body mass agent assumed die. energy_to_mass <units> object, providing agent's energy--bodymass conversion rate (e.g. g/kJ). move_influences named list, defining whether agent influenced model drivers. element corresponds driver_id (must defined model's Driver object) contains single-row data.frame columns: p: numeric, providing probability agent influenced named driver. infl: logical, whether agent influenced driver. determined via Bernoulli trial probability p. state_influences named list, defining whether agent states influenced model drivers. element, named driver_id, contains data.frame columns: state_id: character string, unique identifier agent's state. p: numeric, probability agent's state_id influenced driver. infl: logical, whether agent's state_id influenced driver. determined via Bernoulli trial probability p. ext: <units> value, extent influence agent's state_id. age <units> object, age agent start simulation (currently unused). sex character, sex agent, \"f\"denotes female \"m\" denotes male (currently unused).","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/AgentProperties.html","id":null,"dir":"Reference","previous_headings":"","what":"Create <AgentProperties> objects — AgentProperties","title":"Create <AgentProperties> objects — AgentProperties","text":"AgentProperties() helper function construct instances AgentProperties objects. function initializes agent's properties, including body mass, movement parameters, interactions environmental drivers.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/AgentProperties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create <AgentProperties> objects — AgentProperties","text":"","code":"AgentProperties(   species_id = NA_character_,   initial_mass = NULL,   speeds = list(),   cost_par_draws = list(),   start_point = sf::st_point(),   end_point = sf::st_point(),   mortality_thresh = NULL,   energy_to_mass = NULL,   move_influences = list(),   state_influences = list(),   age = NULL,   sex = c(\"f\", \"m\"),   ...,   species = NULL,   model_config = NULL )"},{"path":"https://dmpstats.github.io/roamR/reference/AgentProperties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create <AgentProperties> objects — AgentProperties","text":"species_id character, identifier code agent's species. initial_mass <units> object, agent's body mass start simulation. speeds named list, defining movement speed properties agent. element specifies agent's average speed given movement state (e.g. flying, swimming, etc). List elements must type <units>. cost_par_draws named list bla start_point, end_point objects class XY, spatial coordinates agent start end simulation, respectively. mortality_thresh <units> object, threshold body mass agent assumed die. energy_to_mass <units> object, providing agent's energy--bodymass conversion rate (e.g. g/kJ). move_influences named list, defining whether agent influenced model drivers. element corresponds driver_id (must defined model's Driver object) contains single-row data.frame columns: p: numeric, providing probability agent influenced named driver. infl: logical, whether agent influenced driver. determined via Bernoulli trial probability p. state_influences named list, defining whether agent states influenced model drivers. element, named driver_id, contains data.frame columns: state_id: character string, unique identifier agent's state. p: numeric, probability agent's state_id influenced driver. infl: logical, whether agent's state_id influenced driver. determined via Bernoulli trial probability p. ext: <units> value, extent influence agent's state_id. age <units> object, age agent start simulation (currently unused). sex character, sex agent, \"f\"denotes female \"m\" denotes male (currently unused). ... reserved future extensions (currently ignored). species <Species> object, NULL (default), used populate slots returned <AgentProperties> object, overriding function arguments. model_config ModelConfig object, used alongside Species populate returned <AgentProperties> object.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/AgentProperties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create <AgentProperties> objects — AgentProperties","text":"object class AgentProperties","code":""},{"path":"https://dmpstats.github.io/roamR/reference/AgentProperties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create <AgentProperties> objects — AgentProperties","text":"species (model_config) specified, arguments ignored. AgentProperties object populated using provided <Species> <ModelConfig> objects. Specifically: @initial_mass sampled Species@body_mass_distr @speeds generated based Species@behaviour_profile @mortality_thresh sampled Species@mortality_thresh_distr @start_point @end_point defined ModelConfig@start_sites ModelConfig@end_sites. cases slots empty, agent's start/end locations randomly assigned within AOC area based slot ModelConfig@aoc_bbox. @move_influences state_influences generated Species@driver_responses.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/ArgSpec-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class <ArgSpec> — ArgSpec-class","title":"Class <ArgSpec> — ArgSpec-class","text":"S4 class specifying characteristics function argument.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/ArgSpec-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class <ArgSpec> — ArgSpec-class","text":"<ArgSpec> defines metadata function's argument, including name, expected type, default value, description, (applicable) probability distribution measurement units. lower level,<ArgSpec> interacts VarFn class define input parameters user-defined function. higher level, supports {roamR}'s IBM definition linking functions arguments broader simulation infrastructure.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/ArgSpec-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class <ArgSpec> — ArgSpec-class","text":"name character, name argument. type character, expected type argument within {roamR} context. Must one : \"driver\": refers argument linked existing driver. \"body_mass\": relates agent’s body mass. \"time_at_state\": used arguments related time spent agent given state current simulation time step. \"constant\": argument fixed value across simulations. \"random\": argument drawn probability distribution. value value assigned argument. driver_id character, required type = \"driver\"; specifies ID assigned given driver. assumes existence <Driver> object matching ID IBM's initialization phase (via rmr_initiate()). Failing , initialization successful. state_id, character, required type = \"time_at_state\"; specifies ID referred state. Assumes existence <State> object matching ID IBM's initialization phase (via rmr_initiate()). description character string, brief explanation argument's purpose. distr Inherited parent class <VarDist>, object class <distribution>. Required type = \"random\", representing probability distribution associated argument's value. units Inherited parent class <VarDist>. character string defining measurement unit argument, either name (e.g. \"grams\") symbol (e.g. \"m/s\").  Units must recognized units::valid_udunits() database.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/ArgSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a <ArgSpec> object — ArgSpec","title":"Create a <ArgSpec> object — ArgSpec","text":"Helper function construct instance <ArgSpec> object, defines metadata function's argument, including name, expected type, default value, description, (applicable) probability distribution measurement units.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/ArgSpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a <ArgSpec> object — ArgSpec","text":"","code":"ArgSpec(   name,   type = c(\"driver\", \"body_mass\", \"time_at_state\", \"constant\", \"random\"),   distr = NULL,   value = NULL,   units = NULL,   driver_id = NULL,   state_id = NULL,   description = NA_character_ )"},{"path":"https://dmpstats.github.io/roamR/reference/ArgSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a <ArgSpec> object — ArgSpec","text":"name character, name argument. empty string (\"\"), empty <ArgSpec> object returned, regardless inputs. type character, expected type argument within {roamR} context. Must one : \"driver\": refers argument linked existing driver. \"body_mass\": relates agent’s body mass. \"time_at_state\": used arguments related time spent agent given state current simulation time step. \"constant\": argument fixed value across simulations. \"random\": argument drawn probability distribution. distr <distributional> object describing probability distribution argument's values. Required type = \"random\". value fixed value assigned argument. Required type = \"constant\". units character string defining measurement unit argument, either name (e.g. \"grams\") symbol (e.g. \"m/s\").  Units must recognized units::valid_udunits() database. Defaults : \"grams\" type = \"body_mass\" \"minutes\" type = \"time_at_state\". driver_id character string, ID driver associated argument (used type = \"driver\"). must match ID <Driver> object available model initialization via rmr_initiate(). defined, defaults name. types, associated slot @driver_id set NA. state_id, character, required type = \"time_at_state\"; specifies ID referred state. Assumes existence <State> object matching ID IBM's initialization phase (via rmr_initiate()). description character string, brief explanation argument's purpose.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/ArgSpec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a <ArgSpec> object — ArgSpec","text":"","code":"# driver ID set to `name` by default ArgSpec(\"sst\", \"driver\") #> An object of class \"ArgSpec\" #> Slot \"name\": #> [1] \"sst\" #>  #> Slot \"type\": #> [1] \"driver\" #>  #> Slot \"value\": #> NULL #>  #> Slot \"driver_id\": #> [1] \"sst\" #>  #> Slot \"state_id\": #> [1] NA #>  #> Slot \"description\": #> [1] NA #>  #> Slot \"distr\": #> <distribution[1]> #> [1] NA #>  #> Slot \"units\": #> [1] \"\" #>   # linking argument name to a given driver ID ArgSpec(\"x\", \"driver\", driver_id = \"sst\", units = \"Degrees_celsius\") #> An object of class \"ArgSpec\" #> Slot \"name\": #> [1] \"x\" #>  #> Slot \"type\": #> [1] \"driver\" #>  #> Slot \"value\": #> NULL #>  #> Slot \"driver_id\": #> [1] \"sst\" #>  #> Slot \"state_id\": #> [1] NA #>  #> Slot \"description\": #> [1] NA #>  #> Slot \"distr\": #> <distribution[1]> #> [1] NA #>  #> Slot \"units\": #> [1] \"Degrees_celsius\" #>   # argument referring to agents' body mass, in kilograms ArgSpec(\"b\", \"body_mass\", units = \"kg\") #> An object of class \"ArgSpec\" #> Slot \"name\": #> [1] \"b\" #>  #> Slot \"type\": #> [1] \"body_mass\" #>  #> Slot \"value\": #> NULL #>  #> Slot \"driver_id\": #> [1] NA #>  #> Slot \"state_id\": #> [1] NA #>  #> Slot \"description\": #> [1] NA #>  #> Slot \"distr\": #> <distribution[1]> #> [1] NA #>  #> Slot \"units\": #> [1] \"kg\" #>   # argument whose input values follow a Bernoulli distribution ArgSpec(\"x\", \"random\", distr = distributional::dist_bernoulli(0.1), units = \"m\") #> An object of class \"ArgSpec\" #> Slot \"name\": #> [1] \"x\" #>  #> Slot \"type\": #> [1] \"random\" #>  #> Slot \"value\": #> NULL #>  #> Slot \"driver_id\": #> [1] NA #>  #> Slot \"state_id\": #> [1] NA #>  #> Slot \"description\": #> [1] NA #>  #> Slot \"distr\": #> <distribution[1]> #> [1] Bernoulli(0.1) #>  #> Slot \"units\": #> [1] \"m\" #>"},{"path":"https://dmpstats.github.io/roamR/reference/as_vardist.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast numeric, distributional and unit objects as VarDist — as_vardist","title":"Cast numeric, distributional and unit objects as VarDist — as_vardist","text":"Cast numeric, distributional unit objects VarDist","code":""},{"path":"https://dmpstats.github.io/roamR/reference/as_vardist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast numeric, distributional and unit objects as VarDist — as_vardist","text":"","code":"as_vardist(x, units)"},{"path":"https://dmpstats.github.io/roamR/reference/bm_smooth_opts.html","id":null,"dir":"Reference","previous_headings":"","what":"Set options for body mass smoother — bm_smooth_opts","title":"Set options for body mass smoother — bm_smooth_opts","text":"Set options body mass smoother","code":""},{"path":"https://dmpstats.github.io/roamR/reference/bm_smooth_opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set options for body mass smoother — bm_smooth_opts","text":"","code":"bm_smooth_opts(time_bw = NULL, smoother = \"NW-kernel\")"},{"path":"https://dmpstats.github.io/roamR/reference/build_cost_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"State cost function factory — build_cost_fn","title":"State cost function factory — build_cost_fn","text":"Internal function operator manufacturing functions calculate energetic costs associated states based user-defined base function. function interprets arguments base function, works features construct function can used model. returned manufactured function wrapper original (base) function can used within package infrastructure. arguments fixed provide required objects compute extract input values original function.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/build_cost_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"State cost function factory — build_cost_fn","text":"","code":"build_cost_fn(vrf, state_id = NULL, step_duration = NULL)"},{"path":"https://dmpstats.github.io/roamR/reference/build_cost_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"State cost function factory — build_cost_fn","text":"vrf <VarFn> object, user-defined function calculating energy cost given state. gets wrapped function usable within {roamR}s infrastructure.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/build_cost_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"State cost function factory — build_cost_fn","text":"function passed base_fun needs observe bunch requirements: Argument names must ID driver, \"b\" biomass /\"t\" time spent activity current time-step responsible handle intended units","code":""},{"path":"https://dmpstats.github.io/roamR/reference/calculate_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortest path calc — calculate_track","title":"Shortest path calc — calculate_track","text":"Shortest path calc","code":""},{"path":"https://dmpstats.github.io/roamR/reference/calculate_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortest path calc — calculate_track","text":"","code":"calculate_track(agent, dens, impacted = FALSE, crs, aoc_bbx, imp_dens = NULL)"},{"path":"https://dmpstats.github.io/roamR/reference/calculate_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortest path calc — calculate_track","text":"agent roamR agent - mainly current location dens raster density map sample impacted TODO crs TODO imp_dens TODO","code":""},{"path":"https://dmpstats.github.io/roamR/reference/calculate_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortest path calc — calculate_track","text":"track","code":""},{"path":"https://dmpstats.github.io/roamR/reference/calculate_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shortest path calc — calculate_track","text":"","code":"TBD #> Error: object 'TBD' not found #' NOTES: #' This approach attempts to avoid large deviations in tracks between baseline #' and impacted scenarios, by forcing endpoints to be closer"},{"path":"https://dmpstats.github.io/roamR/reference/check_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Object Class — check_class","title":"Validate Object Class — check_class","text":"internal input checker function validate whether object belongs expected class, providing clear informative {cli}-style error messages.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/check_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Object Class — check_class","text":"","code":"check_class(   x,   class,   inlist = FALSE,   class_fn = NULL,   arg = rlang::caller_arg(x),   call = rlang::caller_env(),   return_msg = FALSE )"},{"path":"https://dmpstats.github.io/roamR/reference/check_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Object Class — check_class","text":"x target object validate. list, element checked expected class class character string, name expected class x. inlist logical, whether take x list containing objects expected class class_fn character string, indicating function create objects expected class, form \"packagename::functionname\". arg argument name string. argument mentioned error messages input origin problem. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/check_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Object Class — check_class","text":"input checker function, .e. intended internal use within functions check inputs - acts behalf functions input validator. x list, function checks element individually, throwing error element belong expected class. class_fn optional, used generate link error message function's manual page, available.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/check_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"helper to check validity of probability distribution names — check_dist","title":"helper to check validity of probability distribution names — check_dist","text":"helper check validity probability distribution names","code":""},{"path":"https://dmpstats.github.io/roamR/reference/check_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper to check validity of probability distribution names — check_dist","text":"","code":"check_dist(dist)"},{"path":"https://dmpstats.github.io/roamR/reference/check_units_contextual.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if units of an object are those expected under a specific context — check_units_contextual","title":"Check if units of an object are those expected under a specific context — check_units_contextual","text":"Check units object expected specific context","code":""},{"path":"https://dmpstats.github.io/roamR/reference/check_units_contextual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if units of an object are those expected under a specific context — check_units_contextual","text":"","code":"check_units_contextual(   x,   context = c(\"length\", \"weight\", \"energy\", \"energy-time\", \"speed\"),   arg = rlang::caller_arg(x),   call = rlang::caller_env() )"},{"path":"https://dmpstats.github.io/roamR/reference/check_units_contextual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if units of an object are those expected under a specific context — check_units_contextual","text":"x, object inherits class context character, expected unit context object","code":""},{"path":"https://dmpstats.github.io/roamR/reference/compute_vector_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute vector field of a stars raster — compute_vector_fields","title":"Compute vector field of a stars raster — compute_vector_fields","text":"Calculate vector fields (rasters aspect slope) stars object single attribute, multi-dimensions","code":""},{"path":"https://dmpstats.github.io/roamR/reference/compute_vector_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute vector field of a stars raster — compute_vector_fields","text":"","code":"compute_vector_fields(strs, unit = \"radians\")"},{"path":"https://dmpstats.github.io/roamR/reference/create_dnbs_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to extract data and info required for configuring DisNBS's agent simulation model — create_dnbs_config","title":"Helper to extract data and info required for configuring DisNBS's agent simulation model — create_dnbs_config","text":"Quick notes, worthy reference details parent function run_disnbs(): density driver temporal dimension, density raster across model time-steps currently looks exact correspondence time-grid values temporal dimension density driver. means miss-match models expected time-steps available data result error. Might make sense relax approach future dev iterations, e.g. take nearest preceding density slice","code":""},{"path":"https://dmpstats.github.io/roamR/reference/create_dnbs_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to extract data and info required for configuring DisNBS's agent simulation model — create_dnbs_config","text":"","code":"create_dnbs_config(   dens_drv,   ibm_cfg,   ids,   waypnts_res = units::set_units(100, \"m\"),   bmsm_opts = bm_smooth_opts(),   call = rlang::caller_env() )"},{"path":"https://dmpstats.github.io/roamR/reference/create_dnbs_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to extract data and info required for configuring DisNBS's agent simulation model — create_dnbs_config","text":"object class <disnbs_config> listed parameters required input argument config simulate_agent_disnbs()","code":""},{"path":"https://dmpstats.github.io/roamR/reference/derive_night_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive rasters of night-time proportion per day — derive_night_cube","title":"Derive rasters of night-time proportion per day — derive_night_cube","text":"Helper compute  datacube comprising spatio-temporal maps night-time proportions, within simulated AOC simulated time period","code":""},{"path":"https://dmpstats.github.io/roamR/reference/derive_night_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive rasters of night-time proportion per day — derive_night_cube","text":"","code":"derive_night_cube(aoc_strs, start_date, end_date, delta_time = \"1 week\")"},{"path":"https://dmpstats.github.io/roamR/reference/derive_night_cube.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive rasters of night-time proportion per day — derive_night_cube","text":"NOTES: uses geosphere::daylength() requires latitude values. Thus, input aoc_strs object needs projected/resampled \"EPSG:4326\" computations, projected back original CRS Temporal dimension returned  always Date","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Driver-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class <Driver> — Driver-class","title":"Class <Driver> — Driver-class","text":"<Driver> S4 class representing spatially explicit environmental anthropogenic features interact simulated agents. drivers influence agents’ movement, behavioural states, energetic expenditure, physiological condition within IBM's area calculation (AOC) course simulation.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Driver-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class <Driver> — Driver-class","text":"class supports four main categories drivers: \"habitat\" - represents baseline environmental anthropogenic conditions define habitat characteristics (e.g. Sea surface temperature, salinity, bathymetry, distance land). \"resource\": captures spatial distribution availability resources proxies ecological suitability (e.g. species density maps, energy intake surfaces). \"disturbance\" - refers influencers deviate status-quo evaluated effects agents' simulated histories (e.g. offshore windfarm footprints, oil rigs, shipping corridors). \"model\" - refers influencers specified model operational purposes (e.g. AOC bounding box confine simulated movements). <Driver> supports two types spatial data: vector-based simple features (<sf>) gridded spatio-temporal data cubes (<stars>), providing flexibility representing diverse inputs. class interacts Species define agents respond drivers, modifying movement patterns altering behavioural energy costs.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Driver-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class <Driver> — Driver-class","text":"id character string, unique identifier driver. descr descr character string, providing general description driver. ann character string, annotation referencing driver reporting purposes. type character string, driver type within context IBM. Currently supports one two values: \"habitat\" \"impact\". sf_obj object class <sf>, simple feature representing spatial geometry driver, applicable. sf_descr character string, brief description data contained sf_obj. stars_obj object class <stars>, multidimensional array containing grid-type spatio-temporal attributes driver. Typical examples include time-series raster-type density surfaces, distance layers landscape features man-made structures/impacts. stars_meta list object containing metadata stars_obj required modelling purposes stars_descr character string, brief description data contained stars_obj. obj_active character string, flagging whether sf_obj stars_obj used active driver data simulation.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/Driver.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a <Driver> object — Driver","title":"Create a <Driver> object — Driver","text":"Helper function construct instances <Driver> objects","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Driver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a <Driver> object — Driver","text":"","code":"Driver(   id = NA_character_,   type = c(\"habitat\", \"resource\", \"disturbance\", \"model\"),   descr = NA_character_,   ann = id,   sf_obj = NULL,   sf_descr = NA_character_,   stars_obj = NULL,   stars_descr = NA_character_,   obj_active = c(\"none\", \"sf\", \"stars\") )"},{"path":"https://dmpstats.github.io/roamR/reference/Driver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a <Driver> object — Driver","text":"id character string, unique identifier driver. type character string, driver type within context IBM. Currently supports 3 options: \"habitat\" (default), \"impact\" \"model\" (see <Driver>). descr character string, providing general description driver. ann character string, annotation referencing driver reporting purposes. sf_obj object class <sf>, simple feature representing spatial geometry driver, applicable. sf_descr character string, brief description data contained sf_obj. stars_obj object class <stars>, multidimensional array grid-type spatio-temporal attributes driver (e.g. time-series prey-density surfaces, SST, distance surfaces landscape features man-made structures/impacts). <stars> object must follow specific structure compatible model - see Details section formatting requirements. stars_descr character string, providing brief description data contained stars_obj. obj_active character string, flagging whether sf_obj stars_obj used active driver data simulation.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Driver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a <Driver> object — Driver","text":"<Driver> S4 object","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Driver.html","id":"stars-obj-formatting-requirements","dir":"Reference","previous_headings":"","what":"stars_obj formatting requirements","title":"Create a <Driver> object — Driver","text":"<stars> object provided stars_obj argument must meet following structural requirements: Must contain single attribute, values mapped valid unit measurement. Must include two raster dimensions, comprising spatial grid-type properties data. May include one temporal dimension representing temporal resolution aggregation data. present: dimension values type <character>, assumed represent months must match valid English month names abbreviations (see month.name month.abb). dimension values type <numeric>, dimension must named one following values must conform specified ranges: \"month\": integer values 1 12; \"year\": 4-digit integers (e.g., 1998, 2024); \"quarter\": integers 1 4; \"yearweek\": integers 1 52 53; \"yearday\": integers 1 365 366. May include one iteration-type dimension, typically used represent replicate draws bootstrap sampling stochastic simulations. dimension must: Contain integer values; named \"iter\", \"boot\", \"sample\" full data cube must exceed four dimensions total: two raster dimensions two non-raster dimensions (temporal /iterative).","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Driver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a <Driver> object — Driver","text":"","code":"library(sf) #> Warning: package 'sf' was built under R version 4.4.3 #> Linking to GEOS 3.13.0, GDAL 3.10.1, PROJ 9.5.1; sf_use_s2() is TRUE library(stars) #> Warning: package 'stars' was built under R version 4.4.3 #> Loading required package: abind  # mocked-up driver defined by an <sf> object (d <- Driver(   id = \"isl\",   type = \"habitat\",   descr = \"A pit-stop island\",   ann = \"Squared Island\",   sf_obj = st_sf(geom = st_sfc(st_polygon(list(matrix(c(0,0,10,0,10,10,0, 10,0,0), ncol=2, byrow=TRUE))))),   sf_descr = \"coastline\",   obj_active = \"sf\" )) #> An object of class \"Driver\" #> Slot \"id\": #> [1] \"isl\" #>  #> Slot \"type\": #> [1] \"habitat\" #>  #> Slot \"descr\": #> [1] \"A pit-stop island\" #>  #> Slot \"ann\": #> [1] \"Squared Island\" #>  #> Slot \"sf_obj\": #> Simple feature collection with 1 feature and 0 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 0 xmax: 10 ymax: 10 #> CRS:           NA #>                             geom #> 1 POLYGON ((0 0, 10 0, 10 10,... #>  #> Slot \"sf_descr\": #> [1] \"coastline\" #>  #> Slot \"stars_obj\": #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>    A1           #>  Mode:logical   #>  NA's:1         #> dimension(s): #>    from to point values #> X1    1  1 FALSE [0,NA) #> X2    1  1 FALSE [0,NA) #>  #> Slot \"stars_meta\": #> list() #>  #> Slot \"stars_descr\": #> [1] NA #>  #> Slot \"obj_active\": #> [1] \"sf\" #>   plot(d@sf_obj, main = d@ann, col = \"lightblue\")     # mocked-up driver defined by a raster-type <start> object sst <- array(rlnorm(5*5*3*10), dim = c(5, 5, 3, 10)) |>   st_as_stars() |>   st_set_dimensions(3, names = \"month\", values = month.abb[1:3]) |>   st_set_dimensions(4, names = \"iter\") |>   setNames(\"sst\") |>   dplyr::mutate(sst = units::set_units(sst, \"degree_Celsius\"))  (s <- Driver(   id = \"sst\",   type = \"habitat\",   descr = \"Sea Surface Temperature\",   ann = \"SST\",   stars_obj = sst,   obj_active = \"stars\" )) #> An object of class \"Driver\" #> Slot \"id\": #> [1] \"sst\" #>  #> Slot \"type\": #> [1] \"habitat\" #>  #> Slot \"descr\": #> [1] \"Sea Surface Temperature\" #>  #> Slot \"ann\": #> [1] \"SST\" #>  #> Slot \"sf_obj\": #> Simple feature collection with 1 feature and 0 fields (with 1 geometry empty) #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: NA ymin: NA xmax: NA ymax: NA #> CRS:           NA #>        geometry #> 1 POLYGON EMPTY #>  #> Slot \"sf_descr\": #> [1] NA #>  #> Slot \"stars_obj\": #> stars object with 4 dimensions and 1 attribute #> attribute(s): #>                Min.   1st Qu.    Median     Mean  3rd Qu.     Max. #> sst [°C] 0.05291981 0.4974186 0.9718587 1.641775 1.923237 15.72761 #> dimension(s): #>       from to offset delta point        values x/y #> X1       1  5      0     1 FALSE          NULL [x] #> X2       1  5      0     1 FALSE          NULL [y] #> month    1  3     NA    NA FALSE Jan, Feb, Mar     #> iter     1 10      0     1 FALSE          NULL     #>  #> Slot \"stars_meta\": #> $raster #> $raster$dims #> [1] 1 2 #>  #> $raster$names #> [1] \"X1\" \"X2\" #>  #>  #> $non_raster #> $non_raster$dims #> [1] 3 4 #>  #> $non_raster$names #> [1] \"month\" \"iter\"  #>  #> $non_raster$types #> [1] \"temporal\"  \"iteration\" #>  #> $non_raster$procs #> [1] \"month_chr\" \"draw\"      #>  #> $non_raster$cls #> [1] \"character\" \"numeric\"   #>  #>  #>  #> Slot \"stars_descr\": #> [1] NA #>  #> Slot \"obj_active\": #> [1] \"stars\" #>   plot(s@stars_obj, main = s@ann)"},{"path":"https://dmpstats.github.io/roamR/reference/DriverResponse-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class <DriverResponse> — DriverResponse-class","title":"Class <DriverResponse> — DriverResponse-class","text":"<DriverResponse> S4 class defines species-level, per-agent responses specific environmental man-made \"driver\", declared associated object class <Driver>.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/DriverResponse-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class <DriverResponse> — DriverResponse-class","text":"Designed sub-class <Species>, <DriverResponse> tightly integrated class <Driver> enable specification influencing factors directly drive movement, behaviour activities /condition simulated agents. model initialization, <DriverResponse> object must linked corresponding <Driver> object via @driver_id slot <DriverResponse> @id slot <Driver>. Unmatched IDs result error IBM's initialization phase.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/DriverResponse-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class <DriverResponse> — DriverResponse-class","text":"driver_id character string, unique identifier driver. must match @id value concomitant <Driver> object. Unmatched IDs trigger error model initialization. movement object class <MoveInfluence>, specifying driver influences agent's movement states list <StateInfluence> objects, listing influence driver agent's states. condition character string (feature development). Reserved specifying additional effects driver agent condition.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/DriverResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a <DriverResponse> object — DriverResponse","title":"Create a <DriverResponse> object — DriverResponse","text":"Helper function construct instances <DriverResponse> objects, defining per-agent responses specific environmental man-made \"driver\", declared associated object class <Driver>.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/DriverResponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a <DriverResponse> object — DriverResponse","text":"","code":"DriverResponse(   driver_id = NA_character_,   movement = MoveInfluence(),   states = list(),   condition = NA_character_ )"},{"path":"https://dmpstats.github.io/roamR/reference/DriverResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a <DriverResponse> object — DriverResponse","text":"driver_id character string, unique identifier driver. must match @id value concomitant <Driver> object. Unmatched IDs trigger error model initialization. movement object class <MoveInfluence>, specifying driver influences agent's movement states list <StateInfluence> objects, listing influence driver agent's states. condition character string (feature development). Reserved specifying additional effects driver agent condition.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/DriverResponse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a <DriverResponse> object — DriverResponse","text":"model initialization, <DriverResponse> object must linked corresponding <Driver> object via @driver_id slot <DriverResponse> @id slot <Driver>. Unmatched IDs result error IBM's initialization phase.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/estimate_costs.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate energy costs for each state in the profile, given agents condition (e.g. location, bodymass, etc) — estimate_costs","title":"Estimate energy costs for each state in the profile, given agents condition (e.g. location, bodymass, etc) — estimate_costs","text":"Estimate energy costs state profile, given agents condition (e.g. location, bodymass, etc)","code":""},{"path":"https://dmpstats.github.io/roamR/reference/estimate_costs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate energy costs for each state in the profile, given agents condition (e.g. location, bodymass, etc) — estimate_costs","text":"","code":"estimate_costs(agent, states_profile, drivers)"},{"path":"https://dmpstats.github.io/roamR/reference/estimate_costs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate energy costs for each state in the profile, given agents condition (e.g. location, bodymass, etc) — estimate_costs","text":"named list, one element state id","code":""},{"path":"https://dmpstats.github.io/roamR/reference/estimate_costs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate energy costs for each state in the profile, given agents condition (e.g. location, bodymass, etc) — estimate_costs","text":"","code":"TBD #> Error: object 'TBD' not found"},{"path":"https://dmpstats.github.io/roamR/reference/extract_dns_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper on slice_strs() to slice density surface with appropriate indices. Slice construction relies on cfg to define the available non-raster dimensions to evaluate — extract_dns_layer","title":"wrapper on slice_strs() to slice density surface with appropriate indices. Slice construction relies on cfg to define the available non-raster dimensions to evaluate — extract_dns_layer","text":"wrapper slice_strs() slice density surface appropriate indices. Slice construction relies cfg define available non-raster dimensions evaluate","code":""},{"path":"https://dmpstats.github.io/roamR/reference/extract_dns_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper on slice_strs() to slice density surface with appropriate indices. Slice construction relies on cfg to define the available non-raster dimensions to evaluate — extract_dns_layer","text":"","code":"extract_dns_layer(dns_strs, cfg, timestep)"},{"path":"https://dmpstats.github.io/roamR/reference/extract_dns_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper on slice_strs() to slice density surface with appropriate indices. Slice construction relies on cfg to define the available non-raster dimensions to evaluate — extract_dns_layer","text":"dns_strs object containing density datacube","code":""},{"path":"https://dmpstats.github.io/roamR/reference/generate-VarDist-method.html","id":null,"dir":"Reference","previous_headings":"","what":"VarDist random sampler — generate,VarDist-method","title":"VarDist random sampler — generate,VarDist-method","text":"VarDist random sampler","code":""},{"path":"https://dmpstats.github.io/roamR/reference/generate-VarDist-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VarDist random sampler — generate,VarDist-method","text":"","code":"# S4 method for class 'VarDist' generate(object, times = 1)"},{"path":"https://dmpstats.github.io/roamR/reference/get_driver_cell_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cell values from raster-type drivers — get_driver_cell_value","title":"Extract cell values from raster-type drivers — get_driver_cell_value","text":"drivers defined raster-type data, extracts cell value driver given location agent. addition: temporal dimension present, timestamp agent's location also used extraction iteration dimension present, extraction performed one randomly chosen layer.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/get_driver_cell_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cell values from raster-type drivers — get_driver_cell_value","text":"","code":"get_driver_cell_value(driver, agent, vf = NULL)"},{"path":"https://dmpstats.github.io/roamR/reference/IBM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"<IBM> — IBM-class","title":"<IBM> — IBM-class","text":"<IBM> S4 class specifying one instance Individual-Based Model. encapsulates elements required run simulation","code":""},{"path":"https://dmpstats.github.io/roamR/reference/IBM-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"<IBM> — IBM-class","text":"TODO: Flesh description","code":""},{"path":"https://dmpstats.github.io/roamR/reference/IBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a <IBM> object — IBM","title":"Create a <IBM> object — IBM","text":"Helper function construct instances <IBM> objects","code":""},{"path":"https://dmpstats.github.io/roamR/reference/IBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a <IBM> object — IBM","text":"","code":"IBM(   agents = list(),   species = new(\"Species\"),   drivers = list(),   model_config = ModelConfig() )"},{"path":"https://dmpstats.github.io/roamR/reference/init_check_consistency.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization object's consistency check — init_check_consistency","title":"Initialization object's consistency check — init_check_consistency","text":"Evaluates consistency amongst components roamR's IBM initialization function. E.g., asserts : () driver IDs coherent specified species configuration defined drivers; (ii) spatial objects defined driers spatially consistent qiith defined AOC","code":""},{"path":"https://dmpstats.github.io/roamR/reference/init_check_consistency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialization object's consistency check — init_check_consistency","text":"","code":"init_check_consistency(   species,   drivers,   model_config = NULL,   call = rlang::caller_env() )"},{"path":"https://dmpstats.github.io/roamR/reference/introspect_stars.html","id":null,"dir":"Reference","previous_headings":"","what":"Introspects <stars> objects from the stars_obj argument of Driver() — introspect_stars","title":"Introspects <stars> objects from the stars_obj argument of Driver() — introspect_stars","text":"Internal helper used construction <Drivers> objects via Driver() perform validation checks extract dimensional metadata <stars> object specified stars_obj. collected metadata required subsequent internal model use, intended stored slot @stars_meta <Driver> objects.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/introspect_stars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Introspects <stars> objects from the stars_obj argument of Driver() — introspect_stars","text":"","code":"introspect_stars(x, arg = rlang::caller_arg(x), call = rlang::caller_env())"},{"path":"https://dmpstats.github.io/roamR/reference/introspect_stars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Introspects <stars> objects from the stars_obj argument of Driver() — introspect_stars","text":"x <stars> object validated classified.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/introspect_stars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Introspects <stars> objects from the stars_obj argument of Driver() — introspect_stars","text":"list metadata extracted x","code":""},{"path":"https://dmpstats.github.io/roamR/reference/introspect_stars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Introspects <stars> objects from the stars_obj argument of Driver() — introspect_stars","text":"Important Note: checks enforced specific object construction phase within Driver(). Additional lower-level validation stars_obj inputs handled dedicated S4 class validator.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/is_empty-VarDist-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty assertion — is_empty,VarDist-method","title":"Empty assertion — is_empty,VarDist-method","text":"Empty assertion","code":""},{"path":"https://dmpstats.github.io/roamR/reference/is_empty-VarDist-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty assertion — is_empty,VarDist-method","text":"","code":"# S4 method for class 'VarDist' is_empty(object)"},{"path":"https://dmpstats.github.io/roamR/reference/is_empty-VarFn-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty assertion — is_empty,VarFn-method","title":"Empty assertion — is_empty,VarFn-method","text":"emptiness evaluation based exclusively whether fn contains empty function","code":""},{"path":"https://dmpstats.github.io/roamR/reference/is_empty-VarFn-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty assertion — is_empty,VarFn-method","text":"","code":"# S4 method for class 'VarFn' is_empty(object)"},{"path":"https://dmpstats.github.io/roamR/reference/is_empty_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion for empty <function> objects — is_empty_function","title":"Assertion for empty <function> objects — is_empty_function","text":"Assertion empty <function> objects","code":""},{"path":"https://dmpstats.github.io/roamR/reference/is_empty_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion for empty <function> objects — is_empty_function","text":"","code":"is_empty_function(f)"},{"path":"https://dmpstats.github.io/roamR/reference/is_stars_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion for empty <stars> objects — is_stars_empty","title":"Assertion for empty <stars> objects — is_stars_empty","text":"Currently {stars} appear formalised way define test empty objects. , re using stars::st_as_stars(matrix(NA)) generate empty <stars>, specify function test emptiness objects.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/is_stars_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion for empty <stars> objects — is_stars_empty","text":"","code":"is_stars_empty(x)"},{"path":"https://dmpstats.github.io/roamR/reference/is_stars_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertion for empty <stars> objects — is_stars_empty","text":"x object class <stars>","code":""},{"path":"https://dmpstats.github.io/roamR/reference/is_stars_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assertion for empty <stars> objects — is_stars_empty","text":"logical, whether x <stars> object ","code":""},{"path":"https://dmpstats.github.io/roamR/reference/is_stars_empty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assertion for empty <stars> objects — is_stars_empty","text":"internal use .","code":""},{"path":"https://dmpstats.github.io/roamR/reference/ModelConfig-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class <ModelConfig> — ModelConfig-class","title":"Class <ModelConfig> — ModelConfig-class","text":"<ModelConfig> S4 class containing user-defined configuration Individual-based Model (IBM). t specifies key parameters number agents, spatio-temporal resolution model, bounding box (extent) area calculation (AOC), simulation start end date.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/ModelConfig-class.html","id":"start-sites-and-end-sites","dir":"Reference","previous_headings":"","what":"start_sites and end_sites","title":"Class <ModelConfig> — ModelConfig-class","text":"site geometries points, agents' starting/end locations randomly drawn within boundary geometry. example, site defined polygon(s), agents assigned site start/end random points within polygon.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/ModelConfig-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class <ModelConfig> — ModelConfig-class","text":"n_agents integer, number agents track within simulation. ref_sys object class <crs>, defining Coordinate Reference System applied IBM. Must specified via sf::st_crs(). aoc_bbx object class <bbox>, specifying area calculation, .e. spatial bounding box within simulation occurs. delta_x,delta_y numeric, cell (pixel) size x y dimensions, respectively. Assumed take units ref_sys. delta_time character string, defines temporal resolution model. Must one \"day\", \"week\", \"month\", \"quarter\" \"year\", can optionally preceded positive integer space, followed \"s\". start_date;end_date Date, respectively, defines start end dates simulation period. start_sites <sf> object, defining sites agents start simulation. Apart sites' geometry, object must contain following columns: id: unique identifier site. prop: proportion n_agents allocated site. values column must sum 1. start_sites provided, agents assigned random locations within AOC. end_sites <sf> object, analogous start_sites, specifying sites agents must return end simulation. NULL (default), end locations forced upon agent. Note: parameter currently inactive ignored.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/ModelConfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a <ModelConfig> object — ModelConfig","title":"Create a <ModelConfig> object — ModelConfig","text":"Helper function define model configuration IMB. constructs instances <ModelConfig> objects.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/ModelConfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a <ModelConfig> object — ModelConfig","text":"","code":"ModelConfig(   n_agents = 100L,   ref_sys = sf::st_crs(4326),   aoc_bbx = c(0, 0, 10, 10),   delta_x = 0.25,   delta_y = 0.25,   delta_time = \"1 day\",   start_date = Sys.Date() - 5,   end_date = Sys.Date(),   start_sites = NULL,   end_sites = NULL )"},{"path":"https://dmpstats.github.io/roamR/reference/ModelConfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a <ModelConfig> object — ModelConfig","text":"n_agents integer, number agents track within simulation. ref_sys object class <crs>, defining Coordinate Reference System applied IBM. Must specified via sf::st_crs(). aoc_bbx numeric vector object class <bbox>, specifying area calculation, .e. spatial bounding box within simulation occurs. numeric, expects 4-length vector specifying xmin, ymin, xmax ymax values. delta_x, delta_y numeric, cell (pixel) size x y dimensions, respectively. Assumed take units ref_sys. delta_time character string, defines temporal resolution model. Must one \"day\", \"week\", \"month\", \"quarter\" \"year\", can optionally preceded positive integer space, followed \"s\". start_sites <sf> object, defining sites agents start simulation. Apart sites' geometry, object must contain following columns: id: unique identifier site. prop: proportion n_agents allocated site. values column must sum 1. NULL (default), agents start random locations within AOC. end_sites <sf> object, analogous start_sites, specifying sites agents must return end simulation. NULL (default), end locations forced upon agent. Note: parameter currently inactive ignored. start_date;end_date Date, respectively, defines start end dates simulation period.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/ModelConfig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a <ModelConfig> object — ModelConfig","text":"object class <ModelConfig>","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/ModelConfig.html","id":"start-sites-and-end-sites","dir":"Reference","previous_headings":"","what":"start_sites and end_sites","title":"Create a <ModelConfig> object — ModelConfig","text":"site geometries points, agents' starting/end locations randomly drawn within boundary geometry. example, site defined polygon(s), agents assigned site start/end random points within polygon.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/ModelConfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a <ModelConfig> object — ModelConfig","text":"","code":"library(sf) library(ggplot2)  # specify colonies colonies <- st_sf(   id = c(\"A\", \"B\", \"C\"),   prop = c(0.30, 0.30, 0.40),   geom = st_sfc(st_point(c(1,1)), st_point(c(2,2)), st_point(c(3,3))),   crs = 4326 )  # initialize model configuration object config <- ModelConfig(   n_agents = 1000,   ref_sys = st_crs(4326),   aoc_bbx = c(0, 0, 5, 5),   delta_x = 0.25,   delta_y = 0.25,   delta_time = \"1 day\",   start_date = as.Date(\"2022-09-01\"),   end_date = as.Date(\"2022-09-30\"),   start_sites = colonies,   end_sites = colonies )  # Accessors aoc_bbx(config) #> Error in aoc_bbx(config): could not find function \"aoc_bbx\" start_sites(config) #> Error in start_sites(config): could not find function \"start_sites\" end_sites(config) #> Error in end_sites(config): could not find function \"end_sites\"  # vizualizing the AOC's bounding box, the start and end sites ggplot() +   geom_sf(data = st_as_sfc(aoc_bbx(config)), col = \"orange\", fill = NA) +   geom_sf(data = start_sites(config), size = 4, colour = \"darkgreen\") +   geom_sf(data = end_sites(config), col = \"red\") #> Error in aoc_bbx(config): could not find function \"aoc_bbx\""},{"path":"https://dmpstats.github.io/roamR/reference/MoveInfluence-class.html","id":null,"dir":"Reference","previous_headings":"","what":"<MoveInfluence> — MoveInfluence-class","title":"<MoveInfluence> — MoveInfluence-class","text":"<MoveInfluence> S4 class defining influence given driver movement simulated agents. class intended used sub-class <DriverResponse>`","code":""},{"path":"https://dmpstats.github.io/roamR/reference/MoveInfluence-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"<MoveInfluence> — MoveInfluence-class","text":"class allows specifying probabilistic influence driver agent movement, function governing movement influence, type influence modelled.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/MoveInfluence-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"<MoveInfluence> — MoveInfluence-class","text":"prob object class <VarDist>, expressing probability, associated uncertainty/variability, agent's movement influenced driver. fn function, defining influence function applied modify agent movement based driver's spatial properties. Specifically, function describes relationship magnitude influence spatial rate change driver. function take single argument, expressing driver's rate change, output, expressing magnitude influence, bounded 0 (influence) 1 (maximum influence). type character string, specifying type influence applied (e.g., \"attraction\", \"repulsion\"). allows categorization movement influence. mode character string, specifying driver applied movement model. Currently supports 2 options: \"vector-field\" (default): TODO \"cell-value\": TODO sim_stage character string, specifying stage simulation driver applied movement model. Currently supports three options: \"bsln\" (default): TODO \"imp\": TODO \"bsln-imp\": TODO","code":""},{"path":"https://dmpstats.github.io/roamR/reference/MoveInfluence.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a <MoveInfluence> object — MoveInfluence","title":"Create a <MoveInfluence> object — MoveInfluence","text":"Helper function construct instances <MoveInfluence> objects","code":""},{"path":"https://dmpstats.github.io/roamR/reference/MoveInfluence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a <MoveInfluence> object — MoveInfluence","text":"","code":"MoveInfluence(   prob = VarDist(),   fn = function(x) 0,   type = c(\"null\", \"attraction\", \"repulsion\"),   mode = c(\"vector-field\", \"cell-value\"),   sim_stage = c(\"bsln\", \"imp\", \"bsln-imp\") )"},{"path":"https://dmpstats.github.io/roamR/reference/MoveInfluence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a <MoveInfluence> object — MoveInfluence","text":"prob object class <VarDist>, expressing probability, associated uncertainty/variability, agent's movement influenced driver. fn function, defining influence function applied modify agent movement based driver's spatial properties. Specifically, function describes relationship magnitude influence spatial rate change driver. function take single argument, expressing driver's rate change, output, expressing magnitude influence, bounded 0 (influence) 1 (maximum influence). type character string, specifying type influence applied (e.g., \"attraction\", \"repulsion\"). allows categorization movement influence. mode character string, specifying driver applied movement model. Currently supports 2 options: \"vector-field\" (default): TODO \"cell-value\": TODO sim_stage character string, specifying stage simulation driver applied movement model. Currently supports three options: \"bsln\" (default): TODO \"imp\": TODO \"bsln-imp\": TODO","code":""},{"path":"https://dmpstats.github.io/roamR/reference/pluck_s4.html","id":null,"dir":"Reference","previous_headings":"","what":"Get element of list of S4 objects — pluck_s4","title":"Get element of list of S4 objects — pluck_s4","text":"Helper get element list S4 objects using slot @id. Applicable e.g. IBM@drivers Species@states_profile","code":""},{"path":"https://dmpstats.github.io/roamR/reference/pluck_s4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get element of list of S4 objects — pluck_s4","text":"","code":"pluck_s4(l, id)"},{"path":"https://dmpstats.github.io/roamR/reference/pluck_s4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get element of list of S4 objects — pluck_s4","text":"l list containing S4 class objects elements, must contain slot @id id character, name assigned @id","code":""},{"path":"https://dmpstats.github.io/roamR/reference/pluck_s4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get element of list of S4 objects — pluck_s4","text":"","code":"pluck_s4(rover@states_profile, \"water_resting\") #> Error in pluck_s4(rover@states_profile, \"water_resting\"): could not find function \"pluck_s4\"  pluck_s4(rover_ibm_disnbs@drivers, \"dens\") #> Error in pluck_s4(rover_ibm_disnbs@drivers, \"dens\"): could not find function \"pluck_s4\"  # returns NULL if there is no element with specified ID pluck_s4(rover_ibm_disnbs@drivers, \"water_resting\") #> Error in pluck_s4(rover_ibm_disnbs@drivers, \"water_resting\"): could not find function \"pluck_s4\""},{"path":"https://dmpstats.github.io/roamR/reference/rebalance_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Rebalance activity states — rebalance_states","title":"Rebalance activity states — rebalance_states","text":"Rebalance activity states","code":""},{"path":"https://dmpstats.github.io/roamR/reference/rebalance_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rebalance activity states — rebalance_states","text":"","code":"rebalance_states(   states_budget,   night_prop,   feed_state_id,   roost_state_id,   curr_energy,   feed_avg_net_energy,   target_energy,   step_duration )"},{"path":"https://dmpstats.github.io/roamR/reference/rebalance_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rebalance activity states — rebalance_states","text":"states_budget list time budget allocated state (relative proportion) night_prop Proportion day night (roost state fall ) feed_state_id ID feeding state, providing energy intake roost_state_id ID roosting state (night constraint applies) curr_energy net energy level current time-step (kJ) feed_avg_net_energy average net energy intake per unit time feeding (e.g. kJ/hr) target_energy cumulative net energy target (kJ) step_duration duration simulation time-step (e.g 1 day)","code":""},{"path":"https://dmpstats.github.io/roamR/reference/rebalance_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rebalance activity states — rebalance_states","text":"list time budgets allocated state (relative proportions) NOTES: applicable diurnal species","code":""},{"path":"https://dmpstats.github.io/roamR/reference/rebalance_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rebalance activity states — rebalance_states","text":"","code":"TBD #> Error: object 'TBD' not found"},{"path":"https://dmpstats.github.io/roamR/reference/rmr_initiate.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the Individual Based Model — rmr_initiate","title":"Initialize the Individual Based Model — rmr_initiate","text":"Sets starting conditions initial state IBM simulation, incorporating species, habitat, structures, configuration settings.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/rmr_initiate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the Individual Based Model — rmr_initiate","text":"","code":"rmr_initiate(model_config, species, drivers, quiet = FALSE)"},{"path":"https://dmpstats.github.io/roamR/reference/rmr_initiate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the Individual Based Model — rmr_initiate","text":"model_config object class <ModelConfig>, specifying primary configuration settings IBM (see ModelConfig()). species object class <Species>, comprising species-level characteristics simulated agents (see Species()) drivers ... quiet logical, feedback initiation progress prevented printed R console?","code":""},{"path":"https://dmpstats.github.io/roamR/reference/rmr_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Top-line function to run the IBM — rmr_run","title":"Top-line function to run the IBM — rmr_run","text":"Prototyping Version","code":""},{"path":"https://dmpstats.github.io/roamR/reference/rmr_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top-line function to run the IBM — rmr_run","text":"","code":"rmr_run(ibm, .parallel_plan = future::sequential())"},{"path":"https://dmpstats.github.io/roamR/reference/roamR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"roamR: Seabird IBM For Non-Breeding Season — roamR-package","title":"roamR: Seabird IBM For Non-Breeding Season — roamR-package","text":"package Individual Based Model (IBM) simulating seabirds non-breeding season particular. support DisNBS project, funded Carbon Trust Offshore Renewables Joint Industry Partnership (ORJIP)","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/roamR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"roamR: Seabird IBM For Non-Breeding Season — roamR-package","text":"Maintainer: Bruno Caneco bruno@dmpstats.co.uk (ORCID) Authors: Carl Donovan carl@dmpstats.co.uk (ORCID)","code":""},{"path":"https://dmpstats.github.io/roamR/reference/rover.html","id":null,"dir":"Reference","previous_headings":"","what":"A mock Species object — rover","title":"A mock Species object — rover","text":"<Species> object fictitious species mocked data, solely testing demonstration purposes.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/rover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A mock Species object — rover","text":"","code":"rover"},{"path":"https://dmpstats.github.io/roamR/reference/rover.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A mock Species object — rover","text":"object class Species length 1.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/run_disnbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the DisNBS model — run_disnbs","title":"Run the DisNBS model — run_disnbs","text":"Run DisNBS model","code":""},{"path":"https://dmpstats.github.io/roamR/reference/run_disnbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the DisNBS model — run_disnbs","text":"","code":"run_disnbs(   ibm,   run_scen = c(\"baseline\", \"impact\", \"baseline-and-impact\"),   dens_id,   intake_id = NULL,   imp_dens_id = NULL,   imp_intake_id = NULL,   feed_state_id,   roost_state_id,   feed_avg_net_energy = units::set_units(422, \"kJ/h\"),   target_energy = units::set_units(1, \"kJ\"),   waypnts_res = 100,   smooth_body_mass = bm_smooth_opts(),   seed = sample(3000, 1),   quiet = FALSE )"},{"path":"https://dmpstats.github.io/roamR/reference/run_disnbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the DisNBS model — run_disnbs","text":"waypnts_res distance waypoints defining movement path simulated agents. Either <numeric> value, expressed meters, <units> object valid length units.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/sample_cell.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling a density map as PDF — sample_cell","title":"Sampling a density map as PDF — sample_cell","text":"Sampling density map PDF","code":""},{"path":"https://dmpstats.github.io/roamR/reference/sample_cell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling a density map as PDF — sample_cell","text":"","code":"sample_cell(strs, n = 1)"},{"path":"https://dmpstats.github.io/roamR/reference/sample_cell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling a density map as PDF — sample_cell","text":"n many samples draw x <stars> object. first attribute used convert probability surface, based sampling performed.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/sample_cell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling a density map as PDF — sample_cell","text":"matrix x,y coordinates, centre sampled raster cells","code":""},{"path":"https://dmpstats.github.io/roamR/reference/sample_cell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling a density map as PDF — sample_cell","text":"","code":"x <- data.frame(expand.grid(x=1:5, y = 1:5), z = rlnorm(25)) |>      stars::st_as_stars()  sample_cell(x, 10) #> Error in sample_cell(x, 10): could not find function \"sample_cell\""},{"path":"https://dmpstats.github.io/roamR/reference/simulate_agent_disnbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Agent-level simulation under the DisNBS model — simulate_agent_disnbs","title":"Run Agent-level simulation under the DisNBS model — simulate_agent_disnbs","text":"Executes individual-based simulation single <Agent> object DisNBS  model framework. function models agent's spatial movement physiological condition simulation period. Movement based density maps using shortest path method. Energy intake maps used balancing energy expenditure.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/simulate_agent_disnbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Agent-level simulation under the DisNBS model — simulate_agent_disnbs","text":"","code":"simulate_agent_disnbs(   agent,   drivers,   states_profile,   scen = c(\"baseline\", \"impact\"),   night_proportion,   dnbs_cfg,   feed_avg_net_energy,   target_energy = units::set_units(1, \"kJ\") )"},{"path":"https://dmpstats.github.io/roamR/reference/simulate_agent_disnbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Agent-level simulation under the DisNBS model — simulate_agent_disnbs","text":"agent <Agent>, representing individual simulated. dnbs_cfg TODO dens <stars>, providing spatio-temporal species density distribution used drive agent's movement. intake_drv <stars>, containing energy intake surface agent. Used simulate energetic dynamics.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/simulate_agent_disnbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Agent-level simulation under the DisNBS model — simulate_agent_disnbs","text":"modified <Agent> object containing complete simulated trajectory condition history agent simulation period, based provided inputs.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/simulate_agent_disnbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Agent-level simulation under the DisNBS model — simulate_agent_disnbs","text":"Notes expand: Assumes movement exclusively one-directional, towards end track agent gets track's endpoint, stays following rerouting step, relardless travelling distance returned states","code":""},{"path":"https://dmpstats.github.io/roamR/reference/slice_strs.html","id":null,"dir":"Reference","previous_headings":"","what":" Slicer — slice_strs","title":" Slicer — slice_strs","text":"flexible approach dplyr-based stars.slice() method, allowing dynamic slicing multiple dimensions <stars> object.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/slice_strs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Slicer — slice_strs","text":"","code":"slice_strs(strs, dim_along, ..., .drop = FALSE)"},{"path":"https://dmpstats.github.io/roamR/reference/slice_strs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Slicer — slice_strs","text":"strs <stars> object dim_along integer character vector specifying dimensions along slice <stars> array ... integer character vectors providing indices values slice dimensions specified dim_along. order must match order dimensions dim_along. .drop logical, drop dimensions single index slicing?","code":""},{"path":"https://dmpstats.github.io/roamR/reference/slice_strs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" Slicer — slice_strs","text":"<stars> object containing sliced subset original multi-dimensional array.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/slice_strs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Slicer — slice_strs","text":"function enables users extract specific slices along one dimensions optionally dropping singleton dimensions.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/smooth_body_mass.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Energy to mass conversion — smooth_body_mass","title":"Title Energy to mass conversion — smooth_body_mass","text":"Title Energy mass conversion","code":""},{"path":"https://dmpstats.github.io/roamR/reference/smooth_body_mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Energy to mass conversion — smooth_body_mass","text":"","code":"smooth_body_mass(steps, bmass, bw)"},{"path":"https://dmpstats.github.io/roamR/reference/smooth_body_mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Energy to mass conversion — smooth_body_mass","text":"bw bandwidth smoothing x vector values (time steps) e_vect vector energy values","code":""},{"path":"https://dmpstats.github.io/roamR/reference/smooth_body_mass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Energy to mass conversion — smooth_body_mass","text":"vector wts","code":""},{"path":"https://dmpstats.github.io/roamR/reference/smooth_body_mass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Energy to mass conversion — smooth_body_mass","text":"","code":"TBD #> Error: object 'TBD' not found"},{"path":"https://dmpstats.github.io/roamR/reference/Species-class.html","id":null,"dir":"Reference","previous_headings":"","what":"<Species> — Species-class","title":"<Species> — Species-class","text":"<Species> S4 class comprises species-level properties simulated agents. includes attributes related taxonomy, physiology, behavioural/activity states, responses environmental non-environmental drivers, population size.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Species-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"<Species> — Species-class","text":"id character string, unique identifier species. common_name character string, common name species. scientific_name character string, scientific name species. body_mass_distr object class VarDist, defining distribution body mass species. energy_to_mass_distr VarDist object, providing energy--bodymass conversion rate species (e.g. g/kJ). Determines gained lost energy translates changes body mass. states_profile list State objects, defining behavioural/activity states species consider model. driver_responses list DriverResponse objects, specifying species’ responses predefined model drivers, environmental pressures, biological influences, human-induced impacts affecting movement behaviour/activity states. See DriverResponse details. element driver_responses list must correspond existing object class Driver. initialization phase Individual-Based Model (IBM), driver_responses matched respective Driver objects ensure consistent well-defined set species-driver interactions. Failure provide corresponding Driver object entry driver_responses result missing undefined driver effects simulation. mortality_thresh_distr object class VarDist, specifying values agent's condition (e.g. body mass), assumed died (Note: slot may require generalization) pop_size numeric, population size (.e., number individuals) within area calculation (AOC).","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/Species.html","id":null,"dir":"Reference","previous_headings":"","what":"Create <Species> objects — Species","title":"Create <Species> objects — Species","text":"Helper function construct instances Species objects, representing species-level properties simulated agents. include attributes related taxonomy, physiology, behavioural/activity states, responses environmental non-environmental drivers, population size.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create <Species> objects — Species","text":"","code":"Species(   id = NA_character_,   common_name = NA_character_,   scientific_name = NA_character_,   body_mass_distr = VarDist(),   energy_to_mass_distr = VarDist(),   mortality_thresh_distr = VarDist(),   states_profile = list(),   driver_responses = list(),   pop_size = NA_real_ )"},{"path":"https://dmpstats.github.io/roamR/reference/Species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create <Species> objects — Species","text":"id character string, unique identifier species. common_name character string, common name species. scientific_name character string, scientific name species. body_mass_distr object class VarDist, defining distribution body mass species. energy_to_mass_distr VarDist object, providing energy--bodymass conversion rate species (e.g. g/kJ). Determines gained lost energy translates changes body mass. mortality_thresh_distr object class VarDist, specifying values agent's condition (e.g. body mass), assumed died (Note: parameter may require generalization) states_profile list State objects, defining behavioural/activity states species consider model. driver_responses list DriverResponse objects, specifying species’ responses predefined model drivers, environmental pressures, biological influences, human-induced impacts affecting movement behaviour/activity states. See Details section DriverResponse information. pop_size numeric, population size (.e., number individuals) within area calculation (AOC).","code":""},{"path":"https://dmpstats.github.io/roamR/reference/Species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create <Species> objects — Species","text":"element driver_responses list must correspond existing object class Driver. initialization phase {roamR}s IBM, driver_responses matched respective Driver objects ensure consistent set species-driver interactions. Failure provide corresponding Driver object entry driver_responses result missing undefined driver effects simulation.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/Species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create <Species> objects — Species","text":"","code":"library(distributional)  # 1. Start by setting the state profile states <- list(  flight = State(     id = \"flying\",     energy_cost = VarDist(dist_uniform(1, 2), units = \"kJ/hour/gram\"),     time_budget = VarDist(dist_uniform(1, 3), \"hours/day\"),     speed = VarDist(dist_uniform(10, 20), \"m/s\")     ),  dive = State(     id = \"diving\",     energy_cost = VarDist(dist_uniform(1, 2), units = \"kJ/hour/gram\"),     time_budget = VarDist(dist_uniform(1, 3), \"hours/day\"),     speed = VarDist(dist_uniform(10, 20), \"m/s\")   ) )  # 2. Then the list of driver responses driver_resp <- list(   coast = DriverResponse(     driver_id = \"land\",     movement = MoveInfluence(       prob = VarDist(distributional::dist_degenerate(1)),       fn = function(x, slope = 1/2) exp(-slope * x),       type = \"repulsion\"     )),   owf = DriverResponse(     driver_id = \"owf_foot\",     movement = MoveInfluence(       prob = VarDist(dist_beta(2, 8)),       fn = function(x, slope = 1/2) exp(-slope * x),       type = \"repulsion\"     ),     states = list(       StateInfluence(         state_id = \"flying\",         prob = VarDist(dist_beta(1, 5)),         extent = VarDist(dist_lognormal(2, 1), \"hr/day\")       )))   )  # 3. specify <Species> guill <- Species(      id = \"guill\",      common_name = \"guillemot\",      scientific_name = \"Uria Aalge\",      pop_size = 10000,      body_mass_distr = VarDist(dist_uniform(850, 1130), \"g\"),      mortality_thresh_distr = VarDist(dist_normal(500, 20), \"g\"),      states_profile = states,      driver_responses = driver_resp    )"},{"path":"https://dmpstats.github.io/roamR/reference/State-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class <State> — State-class","title":"Class <State> — State-class","text":"S4 class representing properties agent's behavioural activity state. <State> object defines characteristics energy expenditure, time allocation, movement speed individual level.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/State-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class <State> — State-class","text":"<State> designed sub-class Species, allowing species' state profile structured list <State> objects. flexible design enables customized state specifications different species. Currently, three state attributes supported: energy cost, time budget, movement speed. However, class design allows future expansions accommodate additional state attributes.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/State-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class <State> — State-class","text":"id character string, unique identifier state, representing specific behaviour activity. energy_cost <VarDist> object, defining energy expenditure associated state (e.g. kJ/hour/grams). time_budget <VarDist> object, defining agent's typical time allocation state. expressed relative length time (e.g. hours/day). speed <VarDist> object, specifying movement speed associated state (e.g. m/s).","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/State.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a <State> object — State","title":"Create a <State> object — State","text":"Helper function construct instances <State> objects, enabling specification attributes specific agent's behavioural activity state. <State> object defines characteristics energy expenditure, time allocation, movement speed individual level.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/State.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a <State> object — State","text":"","code":"State(   id = NA_character_,   energy_cost = VarDist(),   time_budget = VarDist(),   speed = VarDist() )"},{"path":"https://dmpstats.github.io/roamR/reference/State.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a <State> object — State","text":"id character string, unique identifier state, representing specific behaviour activity. energy_cost <VarDist> <VarFn> object, defining energy expenditure associated state (e.g. kJ/hour/grams). time_budget <VarDist> object, defining agent's typical time allocation state. expressed relative length time (e.g. hours/day). speed <VarDist> object, specifying movement speed associated state (e.g. m/s).","code":""},{"path":"https://dmpstats.github.io/roamR/reference/State.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a <State> object — State","text":"<State> S4 object","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/StateInfluence-class.html","id":null,"dir":"Reference","previous_headings":"","what":"<StateInfluence> — StateInfluence-class","title":"<StateInfluence> — StateInfluence-class","text":"<StateInfluence>","code":""},{"path":"https://dmpstats.github.io/roamR/reference/update_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Update agent's condition — update_agent","title":"Update agent's condition — update_agent","text":"Given current condition agent,","code":""},{"path":"https://dmpstats.github.io/roamR/reference/update_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update agent's condition — update_agent","text":"","code":"update_agent(agent, move_fn, states_fn, crs, ...)"},{"path":"https://dmpstats.github.io/roamR/reference/VarDist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class <VarDist> — VarDist-class","title":"Class <VarDist> — VarDist-class","text":"<VarDist> S4 class encapsulates distributional properties variable interest. allows variables defined n terms probability distribution, sampling distribution, percentile distribution fixed value. class provides structured approach specifying input values allowing quantification uncertainty ensuring proper handling measurement units.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/VarDist-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class <VarDist> — VarDist-class","text":"<VarDist> objects extend functionality commendable distributional package incorporating measurement units, ensuring variable values interpreted processed correctly simulation calculations.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/VarDist-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class <VarDist> — VarDist-class","text":"distr object class <distribution>. Specifies distribution values variable, representing expected value uncertainty/variability. units character string, defining measurement units variable. Must either name (e.g. \"grams\") symbol (e.g. \"m/s\") recognized \"udunits\" database (see units::valid_udunits()). NULL (default) variable assumed unitless.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/VarDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a <VarDist> object — VarDist","title":"Create a <VarDist> object — VarDist","text":"Helper function construct instance <VarDist> object, defines variable interest terms probability distribution, sampling distribution, percentile distribution fixed point estimate.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/VarDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a <VarDist> object — VarDist","text":"","code":"VarDist(distr = NULL, units = NULL)"},{"path":"https://dmpstats.github.io/roamR/reference/VarDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a <VarDist> object — VarDist","text":"distr either object class <distribution> numeric value. Specifies distribution values variable, representing expected value uncertainty/variability. numeric value provided, variable assumed constant remain fixed throughout simulation. units character string, defining measurement units variable. Must either name (e.g. \"grams\") symbol (e.g. \"m/s\") recognized \"udunits\" database (see units::valid_udunits()). NULL (default) variable assumed unitless.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/VarDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a <VarDist> object — VarDist","text":"object class <VarDist>","code":""},{"path":"https://dmpstats.github.io/roamR/reference/VarDist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a <VarDist> object — VarDist","text":"<VarDist> objects extend functionality commendable distributional package integrating measurement units, ensuring variable values interpreted processed correctly simulation calculations.","code":""},{"path":[]},{"path":"https://dmpstats.github.io/roamR/reference/VarDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a <VarDist> object — VarDist","text":"","code":"library(distributional)  # define a Normally distributed variable with units m/s VarDist(dist_normal(mean = 23, sd = 2), \"m/s\") #> An object of class \"VarDist\" #> Slot \"distr\": #> <distribution[1]> #> [1] N(23, 4) #>  #> Slot \"units\": #> [1] \"m/s\" #>    # define a parameter with fixed value VarDist(10, \"m\") #> An object of class \"VarDist\" #> Slot \"distr\": #> <distribution[1]> #> [1] 10 #>  #> Slot \"units\": #> [1] \"m\" #>   # set variable's empirical distribution from a random sample (e.g a bootstrap) boot <- rlnorm(100, 2, 1) mass <- VarDist(dist_sample(list(boot)), \"kg\") # re-sample 100 values generate(mass, times = 100) #> Error in UseMethod(\"generate\"): no applicable method for 'generate' applied to an object of class \"VarDist\""},{"path":"https://dmpstats.github.io/roamR/reference/VarFn-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class <VarFn> — VarFn-class","title":"Class <VarFn> — VarFn-class","text":"<VarFn> S4 class describes functional properties variable interest. enables specification variable function one predictors expression, thereby describing relationship variable explanatory factors. provides structured approach incorporating dynamic dependencies model components. class extends VarDist class, inheriting slots.","code":""},{"path":"https://dmpstats.github.io/roamR/reference/VarFn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a <VarFn> object — VarFn","title":"Create a <VarFn> object — VarFn","text":"Create <VarFn> object","code":""},{"path":"https://dmpstats.github.io/roamR/reference/VarFn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a <VarFn> object — VarFn","text":"","code":"VarFn(fn = NULL, args_spec = NULL, units = NULL, fn_cmp = NULL)"},{"path":"https://dmpstats.github.io/roamR/reference/VarFn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a <VarFn> object — VarFn","text":"args_spec list fn_cmp compiled fn, resulting applying e.g. build_cost_fn() fn","code":""},{"path":"https://dmpstats.github.io/roamR/reference/velocity_ou.html","id":null,"dir":"Reference","previous_headings":"","what":"Find 2D velocity vector of an Ornstein-Uhlenbeck process — velocity_ou","title":"Find 2D velocity vector of an Ornstein-Uhlenbeck process — velocity_ou","text":"Find 2D velocity vector Ornstein-Uhlenbeck process","code":""},{"path":"https://dmpstats.github.io/roamR/reference/velocity_ou.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find 2D velocity vector of an Ornstein-Uhlenbeck process — velocity_ou","text":"","code":"velocity_ou(driftV, beta, currentV, delta, sigma)"},{"path":"https://dmpstats.github.io/roamR/reference/velocity_ou.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find 2D velocity vector of an Ornstein-Uhlenbeck process — velocity_ou","text":"driftV 2d numeric vector representing drift velocity (nominally m/s) current location beta beta parameter controlling correlation velocities 1-delta timesteps currentV 2D numeric vector representing current velocity (nominally m/s) delta Numeric, giving timesteps .e. temporal resolution seconds e.g. 60 means 1-minute step sigma Single numeric, standard deviation velocity noise 1 delta time resolution","code":""},{"path":"https://dmpstats.github.io/roamR/reference/velocity_ou.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find 2D velocity vector of an Ornstein-Uhlenbeck process — velocity_ou","text":"2D numeric (velocity) vector","code":""},{"path":"https://dmpstats.github.io/roamR/reference/velocity_ou.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find 2D velocity vector of an Ornstein-Uhlenbeck process — velocity_ou","text":"","code":"# drift to the NE of approx 1m/s, high correlation, # current velocity SW of approx 1m/s, 10s step, 2.5m/s std dev velocity_ou(c(1, 1), 0.1, c(-1, -1), 10, 2.5) #> [1]  4.429682 13.721865"}]
